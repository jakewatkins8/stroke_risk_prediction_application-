{"version":3,"sources":["Logger.js","store/auth_context.jsx","store/environment.js","LoginWindow.jsx","store/touch_context.jsx","NavBar.jsx","components/Footer.jsx","components/AppWindow.jsx","components/QuestionBlock.jsx","components/BinaryQuestionRadio.jsx","components/NumericalQuestionInput.jsx","components/TernaryQuestionSelect.jsx","components/optionlists.js","Assessment.jsx","components/QueryStatement.jsx","DataVisuals.jsx","Settings.jsx","App.js","ErrorBoundary.jsx","index.js"],"names":["queueSubmitTimer","queueOverflowTimer","blockSetTime","refreshTimer","BASE_URL","process","errorQueue","totalThrown","logToErrorQueue","error","clearTimeout","Date","toISOString","setTimeout","logToServer","console","log","tempErrString","Error","msg","cause","queueTimeObj","queueTime","getTime","queueTimeISO","name","message","push","overflown","length","forEach","errString","log_string","now","errorMessageObj","fetch","method","body","JSON","stringify","headers","then","res","ok","data","catch","splice","AuthContext","React","createContext","token","isLoggedIn","login","logout","auto","autoLoggedOut","calcRemainingTime","expireTime","currTime","AuthContextProvider","props","initToken","tokenData","storedToken","localStorage","getItem","storedExpireTime","remainingDuration","removeItem","duration","getStoredToken","useState","setToken","autoLogOut","setAutoLoggedOut","userIsLoggedIn","logoutHandler","useCallback","refreshHandler","newToken","newExpTime","json","status","statusText","access_token","expiration_time","setItem","timeHalved","contextValue","expirationTime","refreshToken","remainingTime","Provider","value","children","Login","authCtx","useContext","history","useHistory","username","setUsername","password","setPassword","isLoading","setIsLoading","setMessage","setError","handleChange","event","target","a","preventDefault","user","response","result","refresh_token","replace","useEffect","className","onSubmit","htmlFor","onChange","id","type","TouchContext","userTouch","setUserTouch","hasTouched","TouchContextProvider","userHasTouched","setUserHasTouched","NavBar","style","minHeight","to","activeClassName","onClick","Footer","getFullYear","toString","AppWindow","QuestionBlock","questionNumber","question","BinaryQuestionRadio","handleClick","onRadioChange","radioVal1","radioGroupName","required","radioVal1Text","radioVal2","radioVal2Text","NumericalQuestionInput","disabled","isDisabled","placeholder","onValueChange","maxLength","TernaryQuestionSelect","options","onSelectChange","map","option","index","worktypes","smoking","Assessment","glucoseUnknown","setGlucoseUnknown","glucoseDisabled","setDisableGlucose","proba","classify","results","setResults","sex","age","hyper","heart","married","worktype","restype","glucose","bmi","prevGlucoseVal","formData","setFormData","formBlanks","setFormBlanks","formBadInputs","setFormBadInputs","fetchErrorMsg","setFetchErrorMsg","errors","setErrors","questions","resultsRef","useRef","scrollToResultsBox","current","scrollIntoView","behavior","resultsShown","setResultsShown","handleFormChange","prevVal","prevValue","form","sendAssessmentData","Object","values","some","el","numberList","sort","b","inputValid","specialFieldsBlank","property","correspondingProperty","keys","find","oldVal","includes","test","wholeNumRegex","decimalRegex","onLoad","ref","QueryStatement","baseQuery","isNumericAttr","setIfNumericAttr","numericAttrs","handleStatementChange","selectedAttr","setOperators","onStatementChange","onBlur","Plot","createPlotlyComponent","Plotly","DataVisuals","patientData","setPatientData","customQueryData","setCustomQueryData","isExpanded","setExpanded","isCustomExpanded","setCustomExpanded","queryData","setQueryData","errorMsg","setErrorMsg","setPlot1Loading","setPlot3Loading","setPlot4Loading","setPlot5Loading","setCustPlotLoading","plotSwitchOnColor","plotSwitchOffColor","activeCustPlot","setActiveCustPlot","layout","config","plot1","setPlot1","plot2","setPlot2","plot3","setPlot3","plot4","setPlot4","plot5","setPlot5","initBarPlot1","dataSource","custom","strokeNegHyperNeg","filter","dataRow","stroke","strokeNegHyperPos","strokePosHyperNeg","strokePosHyperPos","trace1","x","y","trace2","barmode","title","responsive","setCustPlot","toPatientDataString","gender","heart_d","avg_glucose","initBarPlot2","strokeNegHeartNeg","strokeNegHeartPos","strokePosHeartNeg","strokePosHeartPos","marker","color","initScatterPlot","strokeNeg","strokePos","mode","text","xaxis","autotick","showticklabels","ticks","dtick","showgrid","zeroline","showline","yaxis","legend","margin","cancelled","hasOwnProperty","xVals","yVals","zVals","heatmapData","z","colorscale","heatmapLayout","t","l","r","pad","annotations","showlegend","traceorder","font","family","size","bgcolor","bordercolor","borderwidth","i","j","currentVal","xref","yref","showarrow","automargin","autosize","currentValPrec","Math","abs","toPrecision","textColor","modeBarButtonsToRemove","numericAttrVals","updateQuery","prevQueryData","oldAttribute","oldOperator","statements","setStatements","setPlot1Interactive","setPlot2Interactive","setPlot3Interactive","setPlot4Interactive","setPlot5Interactive","setCustPlotInteractive","plot1Interactive","plot2Interactive","plot3Interactive","plot4Interactive","plot5Interactive","custPlotInteractive","custPlot","backgroundColor","useResizeHandler","borderColor","display","class","e","prevStatements","colSpan","ever_married","work_type","res_type","Settings","logData","setLogData","events","record1","record2","time1","generated_at","program","App","touchCtx","touchListener","window","addEventListener","removeEventListener","exact","path","ErrorBoundary","state","errorInfo","this","setState","href","Component","onerror","src","line","col","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7270a5d6.chunk.js","sourcesContent":["import { BASE_URL } from \"./store/environment\";\r\n\r\n/* Function to log browser errors to the Flask server, both caught and uncaught.\r\n(Uncaught errors are logged using a window.onerror listener in index.js.)\r\n*/\r\n\r\n// Place errors in a queue and bypass/count duplicates?\r\n\r\n// errorQueue array to hold ref's to all errors before they are sent to the server:\r\nconst errorQueue = [];\r\n\r\n// --> add a caveat for if the queue gets too big...to avoid an infinite logging loop where the queue is never sent?\r\n\r\n// timer variable to hold a setTimeout that submits the errorQueue to server.\r\n// resets to 3 sec anytime logToErrorQueue is called.\r\n// once time elapsed, the errorQueue is submitted to the server.\r\nlet queueSubmitTimer;\r\n\r\n// timer variable to hold a timeout that...hm. what?\r\n// \r\n//          *           *               *\r\nlet queueOverflowTimer;\r\n\r\n\r\n// if a queue overflow occurs, this variable will be set to the start time of a queueOverflowTimer\r\nlet blockSetTime;\r\n\r\n// testing\r\nlet totalThrown = 0;\r\n\r\nexport const logToErrorQueue = (error) => {\r\n\r\n    // if queueOverflowTimer contains a timeOut,\r\n    // block the error from being logged in the queue.\r\n    // Errors will be blocked until the queueOverflowTimer is up. \r\n    if (queueOverflowTimer) {\r\n        // console.log(`blocking errors for now, as of ${blockSetTime}.`);\r\n        return;\r\n    }\r\n\r\n\r\n    // debug, maybe:\r\n    // console.log('#:', totalThrown);\r\n\r\n    if (totalThrown >= 10) {\r\n\r\n        if (queueSubmitTimer) clearTimeout(queueSubmitTimer);\r\n\r\n        // set a 3-minute queue block to prevent any errors logging for the next 3 minutes:\r\n        if (!queueOverflowTimer) {\r\n            blockSetTime = new Date().toISOString();\r\n            // the below line seems redundant, but:\r\n            clearTimeout(queueOverflowTimer);\r\n            queueOverflowTimer = setTimeout(() => {\r\n                // console.log('logging and clearing overflown queue.');\r\n\r\n                // In the below logToServe call, log the queue with \"overflown = true\"\r\n                // This is to indicate that the queue was overloaded.\r\n                logToServer(true);\r\n            }, 10000);\r\n        }\r\n\r\n        // test block time: 10 sec (10000 ms)\r\n        // block time: 3 minutes (180000 ms)\r\n        // console.log(`blocking errors from queue for 10 seconds, starting at ${blockSetTime}`);\r\n        \r\n        \r\n        \r\n        return;\r\n    }\r\n\r\n    console.log('error received in queue');\r\n\r\n    // for every error received in the queue, reset the queue submit timeout.\r\n    // once the timeout is able to expire (no other errors have been received in the queue for the last 5 seconds),\r\n    // the errorQueue contents can be logged to the server.\r\n    clearTimeout(queueSubmitTimer);\r\n    queueSubmitTimer = setTimeout(logToServer, 5000);\r\n    \r\n    // grabbing the Date.now() might be the only way to maintain the time of occurence for the server to log - using a queue might remove the previous server logging time that basically served as the time the error was thrown.\r\n\r\n\r\n    // IF the received error is an error OBJECT:\r\n    \r\n\r\n    if (typeof error === 'string') {\r\n\r\n        // console.log('this should not be happening any more.'); \r\n        \r\n        let tempErrString = error;\r\n        error = null;\r\n        error = new Error();\r\n        error.msg = tempErrString;\r\n        error.cause = 'whatever';\r\n    }\r\n\r\n\r\n    // TODO -> hm...untested:\r\n    if (typeof error !== 'object') {\r\n        console.log('what in the WORLD do we have here?');\r\n        console.log('check it out:');\r\n        console.log(error);\r\n    }\r\n\r\n    // date obj representing queue time:\r\n    let queueTimeObj = new Date();\r\n    // queue time as unix time in ms\r\n    error.queueTime = queueTimeObj.getTime();\r\n    // queue time as ISO string\r\n    error.queueTimeISO = queueTimeObj.toISOString(); \r\n    \r\n    // console.log('here:', error);\r\n\r\n    // console.log(Object.keys(error), Object.values(error));\r\n\r\n    // console.log('this, too->', error.cause);\r\n\r\n    console.log('name, message, cause, queueTime:',\r\n    '\\n', error.name,\r\n    '\\n', error.message,\r\n    '\\n', error.cause,\r\n    '\\n', error.queueTime);\r\n\r\n    // add the received error to the current errorQueue:\r\n\r\n    errorQueue.push(error);\r\n    totalThrown++;\r\n\r\n};\r\n\r\n\r\n\r\nconst logToServer = (overflown = false) => {\r\n// don't know if I want to pass errqueue as a param since there's just one queue\r\n\r\n    // for testing:\r\n\r\n    console.log(`${errorQueue.length} error(s) in queue.`);\r\n    if (overflown) console.log('Note: errors thrown by the browser after the first 10 were blocked for the past 3 minutes.');\r\n\r\n    errorQueue.forEach((error) => {\r\n\r\n        let errString = `(time: ${error.queueTimeISO} // cause: ${error.cause})\r\n         name: ${error.name}; msg: ${error.message};`\r\n\r\n        error.log_string = errString;\r\n    \r\n    });\r\n    \r\n    // and if the queue was overflown, tack a message on to the queue to send to the log:\r\n    if (overflown) {\r\n        let now = new Date().toISOString();\r\n        let errorMessageObj = {};\r\n        errorMessageObj.log_string = `*NOTE: The last 10 log records came from an overflown queue. For the time between ${blockSetTime} and ${now}, any additional front end errors thrown after these 10 were not logged (the overflown queue was blocked to keep from making too many server calls.)`;\r\n        errorQueue.push(errorMessageObj);\r\n    }\r\n\r\n    // and send to the server:\r\n\r\n\r\n    // console.log(errorQueue);\r\n    // console.log(errorQueue[2], '/', errorQueue[0]);\r\n    \r\n    // gives 10 for a full queue, correct:\r\n    // console.log(errorQueue.length); \r\n    // console.log(errorQueue[0].msg);\r\n    // console.log(Object.keys(errorQueue[0]));\r\n    \r\n    // fetch(BASE_URL + \"api/clientlogger\", {\r\n    //     method: 'POST',\r\n    //     body: JSON.stringify(errorQueue),\r\n    //     headers: {'Content-Type': 'application/json'}\r\n    // }).then(res => {\r\n    //     console.log(res);\r\n    //     return res;\r\n    // }).catch(error => {\r\n    //     console.log('an error on an error:');\r\n    //     console.log(error);\r\n    // });\r\n\r\n\r\n    // TODO wowee look at this fetch haha\r\n    fetch(BASE_URL + \"api/clientlogger\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(errorQueue),\r\n        headers: {\"Content-Type\": \"application/json\"}\r\n    }).then(res => {\r\n        return res.ok ? 'response after logging ok' : 'reponse after logging NOT ok';\r\n    }).then(data => data).catch(error => {\r\n        console.log('something went wrong while logging the error queue to the server -> \\'\\n', error);\r\n    });\r\n\r\n    // and then clear the queue using splice:\r\n    errorQueue.splice(0, errorQueue.length);\r\n\r\n    // testing:\r\n    totalThrown = 0;\r\n    \r\n    // and clear the timeOut that (could have) called this function:\r\n    // clearTimeout(queueOverflowTimer);\r\n    // or...set it to null, again?\r\n    // set to null instead of clearing timeOut\r\n    queueOverflowTimer = null;\r\n\r\n};","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { logToErrorQueue } from \"../Logger\";\r\n\r\nimport { BASE_URL } from \"./environment\";\r\n\r\nlet logoutTimer;\r\n\r\nlet refreshTimer;\r\n\r\nconst AuthContext = React.createContext({\r\n    token: '',\r\n    isLoggedIn: false,\r\n    login: (token) => {},\r\n    logout: (auto) => {},\r\n    autoLoggedOut: false\r\n    // activeUser: ''\r\n});\r\n\r\n// calc. remaining time, both for new token (fresh login) and for\r\n// retrieving old token (getStoredToken where token data is still present in localStorage)\r\n\r\nconst calcRemainingTime = (expireTime) => {\r\n    const currTime = new Date().getTime();\r\n    const adjExpireTime = new Date(expireTime).getTime();\r\n\r\n    const remainingTime = adjExpireTime - currTime;\r\n\r\n    // time value in ms, as a number\r\n    return remainingTime;\r\n};\r\n\r\nconst getStoredToken = () => {\r\n\r\n    console.log('getting stored token if it exists:');\r\n \r\n    const storedToken = localStorage.getItem('token');\r\n    const storedExpireTime = localStorage.getItem('expireTime');\r\n\r\n\r\n    const remainingDuration = calcRemainingTime(storedExpireTime);\r\n\r\n\r\n    console.log('results\\n token:', storedToken, '\\n exp time:', storedExpireTime, '\\n time left:', remainingDuration, 'ms');\r\n\r\n\r\n    \r\n    if (remainingDuration <= 0) {\r\n\r\n        // // **************possible bad logic here - unless the access token is ALWAYS refreshed before its time is <= 0.\r\n\r\n        console.log('access_t:', localStorage.getItem('accessToken'), '\\n',\r\n        'expireTime:', localStorage.getItem('expireTime'), '\\n',\r\n        'refresh_t', localStorage.getItem('refreshToken'));\r\n        console.log('the local storage access token either does not exist, or is expired. clearing any local storage.');\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expireTime');\r\n        localStorage.removeItem('refreshToken');\r\n\r\n\r\n        if (refreshTimer) {\r\n            console.log(\"clearing Refresh timer.\");\r\n            clearTimeout(refreshTimer);\r\n        }\r\n        \r\n        return {\r\n            token: null,\r\n            duration: null\r\n        };\r\n\r\n    }\r\n\r\n    return {\r\n        token: storedToken,\r\n        duration: remainingDuration\r\n    };\r\n\r\n\r\n    \r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n\r\n    \r\n    const tokenData = getStoredToken();\r\n\r\n    let initToken;\r\n\r\n    // let user;\r\n    \r\n    // set a token from storage if it was found:\r\n    if (tokenData) {\r\n        initToken = tokenData.token;\r\n        // user = tokenData.active_user;\r\n    }\r\n\r\n    const [token, setToken] = useState(initToken);\r\n    const [autoLogOut, setAutoLoggedOut] = useState(false);\r\n    // const [activeUser, setActiveUser] = useState();\r\n\r\n\r\n\r\n    \r\n    \r\n    // shorthand to evaluate boolean value of token - truthy or falsy (i.e. null, \"\", NaN(?), 0, etc.)\r\n    const userIsLoggedIn = !!token;\r\n\r\n    console.log(\"first, isloggedin:\", userIsLoggedIn);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // don't have to use useEffect since localStorage is synchronous API\r\n\r\n    const logoutHandler = useCallback((auto = true) => {\r\n\r\n        if (auto) {\r\n            setAutoLoggedOut(true);\r\n        }\r\n        else {\r\n            setAutoLoggedOut(false);\r\n        }\r\n        \r\n\r\n        setToken(null);\r\n\r\n        // also remove the token from localStorage\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expireTime');\r\n        localStorage.removeItem('refreshToken');\r\n        \r\n        // figure out where refresh tokens should go (what, a http-only cookie?)\r\n        \r\n        // Maybe don't ever remove the refresh token...it will be invalidated server-side?\r\n        // but then do you need a blacklist?\r\n        // localStorage.removeItem('refreshToken');\r\n\r\n        if (logoutTimer) {\r\n            clearTimeout(logoutTimer);\r\n        }\r\n\r\n        if (refreshTimer) {\r\n            clearTimeout(refreshTimer);\r\n        }\r\n\r\n    }, []);\r\n    // dependencies: don't have to add clearTimeout bc it's browser function. setToken doesn't have to be added because it's guaranteed by react to not change. logoutTimer doesn't have to be added because it's global and outside the rendering flow.\r\n\r\n    \r\n    const loginHandler = (token, expirationTime, refreshToken) => {\r\n        setToken(token);\r\n        // also add the token to localStorage\r\n        localStorage.setItem('token', token); // objects must be JSON'ed to store.\r\n        localStorage.setItem('expireTime', expirationTime);\r\n\r\n        console.log(expirationTime);\r\n\r\n        // *******\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n \r\n\r\n\r\n        // calc remainingTime to log user out, if needed\r\n        const remainingTime = calcRemainingTime(expirationTime);\r\n\r\n        console.log(\"rem. time -------------\", remainingTime);\r\n\r\n        // halve the rem. time:\r\n        const timeHalved = remainingTime/2;\r\n\r\n        // refreshing is occurring at half of the elapsed access token time,\r\n        // just in order to provide more than enough remaining time for the frontend to reobtain a new token.\r\n        // The frontend needs to finish renewing the token before the current access token actually runs completely out of time.\r\n\r\n        // obtain 90% of the total access token time:\r\n        // do this to fetch a refresh from the server BEFORE the token expires.\r\n        // const timeNinetyPercent = remainingTime * 0.90;\r\n\r\n        console.log('time until refresh', timeHalved);\r\n\r\n        // console.log('time until refresh:', timeNinetyPercent);\r\n\r\n        if (refreshTimer) {\r\n            console.log('clearing');\r\n            clearTimeout(refreshTimer); \r\n        }\r\n\r\n        refreshTimer = setTimeout(refreshHandler, timeHalved);\r\n\r\n    };\r\n\r\n    const refreshHandler = () => {\r\n\r\n        console.log('refreshing token that expires soon, or refreshing old stored token that was found to be expired on page load.');\r\n\r\n        let newToken;\r\n        let newExpTime;\r\n\r\n        fetch((BASE_URL + 'api/refresh'), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('refreshToken')}`\r\n            }\r\n        }).then(res => {\r\n            // console.log(res.status);\r\n            if (res.ok) {\r\n                return res.json();\r\n            } else {\r\n                console.log(res.status, res.statusText);\r\n                console.log('auto-logging out.');\r\n                logoutHandler();\r\n            }\r\n        }).then(data => {\r\n\r\n            newToken = data.access_token;\r\n            newExpTime = new Date(new Date().getTime() + (+data.expiration_time * 1000)).toISOString();\r\n\r\n            console.log(newExpTime);\r\n\r\n            setToken(newToken);\r\n            // also add the token to localStorage\r\n            localStorage.setItem('token', newToken); // objects must be JSON'ed to store.\r\n            localStorage.setItem('expireTime', newExpTime);\r\n    \r\n            // calc remainingTime to log user out, if needed\r\n            const remainingTime = calcRemainingTime(newExpTime);\r\n    \r\n            // halve the rem. time:\r\n            const timeHalved = remainingTime/2;\r\n\r\n            // const timeNinetyPercent = remainingTime * 0.90;\r\n\r\n            console.log('time until refresh', timeHalved);\r\n    \r\n            // console.log('time until refresh:', timeNinetyPercent);\r\n    \r\n            \r\n            // console.log('time until refresh', timeHalved);\r\n\r\n            if (refreshTimer) {\r\n                console.log('clearing it');\r\n                clearTimeout(refreshTimer);\r\n            }\r\n\r\n            refreshTimer = setTimeout(refreshHandler, timeHalved);\r\n    \r\n             \r\n            // const expireTime = new Date(new Date().getTime() + (+result.expiration_time * 1000));\r\n            // authCtx.login(result.access_token, expireTime.toISOString(), result.refresh_token);\r\n\r\n\r\n        }).catch(error => {\r\n            error.cause = 'auth_context refresh handler';\r\n            logToErrorQueue(error);\r\n        });\r\n    };\r\n\r\n\r\n\r\n    // commented out while I try to figure out refresh tokens:\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (tokenData) {\r\n    //         console.log(tokenData.duration);\r\n    //         //logoutTimer = setTimeout(logoutHandler, tokenData.duration);\r\n    //     }\r\n    // }, [tokenData, logoutHandler]); // and logoutHandler is called earlier using useCallback to ensure it is not recreated unnecessarily - avoid accidental feedback loops\r\n\r\n    const contextValue = {\r\n        token: token,\r\n        isLoggedIn: userIsLoggedIn,\r\n        login: loginHandler,\r\n        logout: logoutHandler,\r\n        autoLoggedOut: autoLogOut\r\n    };\r\n\r\n\r\n    return (\r\n    <AuthContext.Provider value={contextValue}>\r\n        {props.children}\r\n    </AuthContext.Provider>\r\n    );\r\n\r\n};\r\n\r\nexport default AuthContext;","export const BASE_URL = process.env.REACT_APP_BASE_URL;\r\n\r\n","import React, { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./styles/LoginWindow.css\";\r\nimport AuthContext from \"./store/auth_context\";\r\n\r\nimport { BASE_URL } from \"./store/environment\"\r\nimport { logToErrorQueue } from \"./Logger\";\r\n\r\nconst Login = (props) => {\r\n\r\n    const authCtx = useContext(AuthContext);\r\n\r\n    const history = useHistory();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    function handleChange(event) {\r\n\r\n        if (event.target.name === \"username\") {\r\n            setUsername(event.target.value);\r\n        }\r\n        if (event.target.name === \"password\") {\r\n            setPassword(event.target.value);\r\n        }\r\n    \r\n    }\r\n\r\n    // i think authCtx.autoLoggedOut is a safe dependency here, right?\r\n    // hm.\r\n    useEffect(() => {\r\n        if (authCtx.autoLoggedOut) {\r\n            setError(true);\r\n            setMessage(\"Your login session has expired.\");\r\n        }\r\n    }, [authCtx.autoLoggedOut]);\r\n\r\n\r\n    // TODO testing throwing an error to the errorQueue:\r\n    // useEffect(() => {\r\n\r\n    //     console.log('run run run run ');\r\n    //     // let jimmy = 'this - looks - like - a - job - for -- ME!';\r\n    //     try {\r\n    //         null.props = '2'/NaN+(+23); \r\n    //         console.log('no problems here.');\r\n    //     }\r\n    //     catch (err) {\r\n    //         err.cause = 'JIMMY!!!!';\r\n    //         logToErrorQueue(err); \r\n    //     }\r\n    // }, []);\r\n\r\n\r\n    async function send(event) {\r\n\r\n        // suppress page change on form submit:\r\n        event.preventDefault();\r\n\r\n        // clear any old messages?\r\n        // \r\n        setMessage(\"\");\r\n\r\n        // first, validate that username and password fields are not blank:\r\n        if (!username || !password) {\r\n\r\n            // update UI\r\n            setError(true);\r\n            setMessage('Please fill in both fields.');\r\n\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        \r\n\r\n        let user = {\r\n        username: username,\r\n        password: password\r\n        };\r\n\r\n\r\n        try {\r\n\r\n            const response = await fetch((BASE_URL + \"login\"), {\r\n                method: 'POST',\r\n                body: JSON.stringify(user),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            const result = await response.json();\r\n            console.log(result);\r\n\r\n            // if an error message is returned in a JSON object:\r\n            if (result.error || !result.expiration_time) {\r\n                // console.log('it has an ERROR');\r\n                // console.log(result.error);\r\n                setError(true);\r\n                setMessage(result.error);\r\n                setIsLoading(false);\r\n                // and return; do not try to log in or set times below\r\n                return;\r\n            }\r\n            //setMessage(JSON.stringify(result));\r\n\r\n\r\n            // obtain new expiration in time from the data passed in the jwt:\r\n            const expireTime = new Date(new Date().getTime() + (+result.expiration_time * 1000));\r\n\r\n            console.log('expireTime:', expireTime.toISOString());\r\n\r\n            authCtx.login(result.access_token, expireTime.toISOString(), result.refresh_token);\r\n\r\n            // -----> see how this goes:\r\n            // setIsLoading(false);\r\n            // seems unnecessary since the component receiving the state is unmounted by then.\r\n            // but, do I need to clean up anything before it's unmounted? Hm.\r\n            \r\n\r\n            history.replace(\"/assessment\");\r\n\r\n        } catch(error) {\r\n            setIsLoading(false);\r\n            setMessage(\"Something went wrong while logging in. Please try again.\");\r\n            \r\n            // console.log(error);\r\n            \r\n            error.cause = \"login fetch request\";\r\n            logToErrorQueue(error);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n    return (\r\n    <>\r\n    <div className=\"loginwindow\">\r\n        <h2>User Login</h2>\r\n        <form onSubmit={send}  method=\"post\">\r\n        <div className=\"formGrid\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input onChange={handleChange} name=\"username\" id=\"username\" type='text' value={username}></input>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input onChange={handleChange} name=\"password\" id=\"password\" type='password' value={password}></input>\r\n        </div>\r\n        {\r\n            !isLoading && \r\n            (error && <div className='messageBox messageBoxError'>\r\n                <p>{message}</p>\r\n            </div>)\r\n        }\r\n\r\n        {isLoading && (<div className='loadingWrapper'>\r\n        <div className='loading1'></div>\r\n        <div className='loading2'></div>\r\n        </div>\r\n        )}\r\n\r\n        \r\n        <div className=\"buttonWrapper\">\r\n            <button type=\"submit\">Log In</button>\r\n        </div>\r\n        </form>\r\n    </div>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Login;","// imports...?\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst TouchContext = React.createContext({\r\n    userTouch: false,\r\n    setUserTouch: () => {}\r\n});\r\n\r\n// and here -->  <--\r\n// methods as needed\r\n// maybe the method just to check the touch variable status, if it's even needed\r\n\r\n\r\n// how to store the state across...time?\r\nlet hasTouched = false;\r\n\r\nexport const TouchContextProvider = (props) => {\r\n    \r\n    // \r\n    // IDK if it's a good idea to use the userTouch value from above, to init. the provider's state.\r\n    // \r\n    // to elucidate - it doesn't recognize it here, from above. it's undefined here.\r\n    // so, false it is, i guess.\r\n\r\n    // console.log('the let hasTouched:', hasTouched);\r\n    // this value DOES seem to persist across pages, iterations, whatever.\r\n\r\n\r\n    const [userHasTouched, setUserHasTouched] = useState(hasTouched);\r\n\r\n    const userTouchHandler = () => {\r\n\r\n        // console.log('current let -> hasTouched:', hasTouched);\r\n\r\n        // console.log('touch ctx:');\r\n        // console.log('current userHasTouched:', userHasTouched);\r\n\r\n        if (!userHasTouched) {\r\n            setUserHasTouched(true);\r\n            hasTouched = true;\r\n        }\r\n\r\n\r\n        // console.log('new user has touched (unless the state didn\\'t update yet):', userHasTouched);\r\n    };\r\n\r\n    const userHasTouchedInSession = !!userHasTouched;\r\n\r\n    const contextValue = {\r\n        userTouch: userHasTouchedInSession,\r\n        setUserTouch: userTouchHandler\r\n    };\r\n\r\n    return (\r\n        <TouchContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </TouchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TouchContext;\r\n\r\n\r\n\r\n\r\n\r\n","import \"./styles/NavBar.css\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\n\r\nimport AuthContext from \"./store/auth_context\";\r\n\r\n// \r\nimport TouchContext from \"./store/touch_context\";\r\n// \r\n\r\nconst NavBar = () => {\r\n\r\n\r\n    const authCtx = useContext(AuthContext);\r\n\r\n    // \r\n    const touchCtx = useContext(TouchContext);\r\n    // \r\n    // \r\n    const userHasTouched = touchCtx.userTouch;\r\n    //\r\n    \r\n\r\n    const isLoggedIn = authCtx.isLoggedIn;\r\n\r\n    const logoutHandler = () => {\r\n\r\n        authCtx.logout(false);\r\n\r\n    };\r\n\r\n    return (<div className=\"navBarWrapper\" style={ isLoggedIn ? { minHeight: '180px' } : { minHeight: '4em' } }>\r\n\r\n            { isLoggedIn ? \r\n            (<>\r\n                <div className=\"headerLeftCol\">\r\n\r\n                    <div className=\"title\">\r\n                        <NavLink className=\"titleLink\" to=\"/\">\r\n                            <h1>Stroke Risk Assessment App</h1>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <nav className=\"navLinksContainer\">\r\n                        {/* {isLoggedIn && (<> */}\r\n                        <div className=\"navContainerSpacingEdge\">\r\n\r\n                        </div>\r\n                        <NavLink className=\"link\" id=\"assessmentLink\" to=\"/assessment\" activeClassName=\"activeLink\">\r\n                            <span>Patient Assessment</span>\r\n                        </NavLink>\r\n                        <NavLink className=\"link\" id=\"dataLink\" to=\"/data\" activeClassName=\"activeLink\">\r\n                            <span>Data Visualizations</span>\r\n                        </NavLink>\r\n                        <div className=\"navContainerAccentEdge\">\r\n                        </div>\r\n                        {/* </> */}\r\n                        {/* )} */}\r\n                        \r\n                    </nav>\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"headerRightCol\">\r\n\r\n                    {/* {isLoggedIn && \r\n                    <> */}\r\n                    <div className=\"linkContainer\">\r\n                        <NavLink className=\"appMonitoring\" to=\"/settings\" activeClassName=\"activeLink\">\r\n                            {/* <button>App Monitoring</button> */}\r\n                            <span>App Monitoring</span>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={logoutHandler}>Log Out</button>\r\n                    </div>\r\n                    {/* </>} */}\r\n\r\n                </div>\r\n            </>)\r\n            :\r\n                <div className=\"loneTitle\">\r\n                        <h1>Stroke Risk Assessment App</h1>\r\n                </div>\r\n            }\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NavBar;","import \"../styles/Footer.css\";\r\n\r\nconst Footer = () => {\r\n\r\n    const getCurrentYear = () => {\r\n\r\n        const currentYear = new Date().getFullYear().toString();\r\n\r\n        return currentYear;\r\n\r\n    };\r\n\r\n\r\n    return (\r\n    <div className=\"pageFooter\">\r\n        <span>&copy; {getCurrentYear()} &nbsp; Jacob Watkins</span>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import { Fragment } from \"react\";\r\nimport \"../styles/appwindow.css\";\r\nimport NavBar from \"../NavBar\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst AppWindow = (props) => {\r\n    return (\r\n    <div className=\"appwindow\">\r\n    <NavBar />\r\n        {props.children}\r\n    <Footer />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default AppWindow;","const QuestionBlock = (props) => {\r\n\r\n    return (\r\n        <div className=\"questionBlock\">\r\n            <div className=\"questionNo\">\r\n            <span><span className=\"number\">{props.questionNumber}</span>/10</span>\r\n            </div>\r\n        \r\n        <p className=\"questionText\">{props.question}</p>\r\n\r\n\r\n        {props.children}\r\n\r\n\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default QuestionBlock;","import { logToErrorQueue } from \"../Logger\";\r\n\r\nconst BinaryQuestionRadio = (props) => {\r\n\r\n    const handleClick = (event) => {\r\n        try {\r\n            props.onRadioChange(event);\r\n            \r\n            // testing throwing an error to the catch block:\r\n            // console.log(null.dj);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'BinaryQuestionRadio event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n\r\n \r\n\r\nreturn (\r\n    <div className=\"radioContainer\">\r\n    <div className=\"labelInputPair\">\r\n        <input id={props.radioVal1} onClick={handleClick} type=\"radio\" name={props.radioGroupName} required value={props.radioVal1}></input>\r\n        <label htmlFor={props.radioVal1}>{props.radioVal1Text}</label>\r\n    </div>\r\n\r\n    <div className=\"labelInputPair\">\r\n        <input id={props.radioVal2} onClick={handleClick} type=\"radio\" name={props.radioGroupName} value={props.radioVal2}></input>\r\n        <label htmlFor={props.radioVal2}>{props.radioVal2Text}</label>\r\n    </div>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default BinaryQuestionRadio;","import { logToErrorQueue } from \"../Logger\";\r\n\r\nconst NumericalQuestionInput = (props) => {\r\n\r\n    const handleChange = (event) => {\r\n        try {\r\n        props.onValueChange(event);\r\n        }\r\n        catch(error) {\r\n            error.cause = 'NumericalQuestionInput event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"inputContainer numericalLabelInputPair\">\r\n            <label htmlFor={props.name}>{props.name}</label>\r\n            <input disabled={props.isDisabled} name={props.name} type=\"text\" placeholder={props.placeholder} onChange={handleChange} required maxLength={props.maxLength}>\r\n            </input>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default NumericalQuestionInput;","import { logToErrorQueue } from \"../Logger\";\r\n\r\n// import \"../styles/TernaryQuestionSelect.css\";\r\n\r\nconst TernaryQuestionSelect = (props) => {\r\n\r\n    const handleChange = (event) => {\r\n        try {\r\n        props.onSelectChange(event);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'TernaryQuestionSelect event';\r\n            logToErrorQueue(error);\r\n        }\r\n    }\r\n\r\n\r\n    // Need to likely come back and replace the index-keys below in the list with a different type of key, like UUID, maybe.\r\n    \r\n    const options = props.options;\r\n\r\n    return(\r\n    <select name={props.name} onChange={handleChange} required>\r\n        <option key={0} value=\"\">Select one option...</option>\r\n        {options.map((option, index) => {\r\n            return <option key={index} value={option}>{option}</option>;\r\n        })}\r\n    </select>\r\n    );\r\n\r\n};\r\n\r\nexport default TernaryQuestionSelect;","export const worktypes = [\r\n    \"Private company job (non-government)\", \r\n    \"Self-employed\", \r\n    \"Government job\", \r\n    \"Never worked\", \r\n    \"Stay-at-home parent\"];\r\n\r\nexport const smoking = [\r\n    \"Never smoked\", \r\n    \"Formerly smoked\", \r\n    \"Currently smokes\"];","import \"./styles/Assessment.css\";\r\n\r\n\r\n\r\nimport { useCallback, useState, useEffect, useRef, useContext } from \"react\";\r\n\r\nimport AuthContext from \"./store/auth_context\";\r\n\r\nimport QuestionBlock from \"./components/QuestionBlock\";\r\n\r\nimport BinaryQuestionRadio from \"./components/BinaryQuestionRadio\";\r\nimport NumericalQuestionInput from \"./components/NumericalQuestionInput\";\r\nimport TernaryQuestionSelect from \"./components/TernaryQuestionSelect\";\r\n\r\nimport { worktypes, smoking } from \"./components/optionlists\";\r\n\r\nimport { BASE_URL } from \"./store/environment\";\r\nimport { logToErrorQueue } from \"./Logger\";\r\n\r\nconst Assessment = () => {\r\n\r\n\r\n    // use of authCtx for auto-logout upon failure to reach server w/a token\r\n    const authCtx = useContext(AuthContext);\r\n\r\n    // Note: it's possible these two state objects could be reduced to just one.\r\n\r\n    // state object to represent whether or not the user has checked the glucose unknown checkbox:\r\n    const [glucoseUnknown, setGlucoseUnknown] = useState(false);\r\n    // state object to represent whether or not the glucose field should be disabled (disable if glucose unknown):\r\n    const [glucoseDisabled, setDisableGlucose] = useState(false);\r\n\r\n    // state object to receive and display assessment results from server:\r\n    const [results, setResults] = useState({\r\n        proba: '',\r\n        classify: ''\r\n    })\r\n\r\n    // state object to maintain all user input form data for submission:\r\n    const [formData, setFormData] = useState({\r\n        sex: \"\",\r\n        age: \"\",\r\n        hyper: \"\",\r\n        heart: \"\",\r\n        married: \"\",\r\n        worktype: \"\",\r\n        restype: \"\",\r\n        glucose: \"\",\r\n        bmi: \"\",\r\n        smoking: \"\",\r\n        prevGlucoseVal: \"\"\r\n    });\r\n\r\n\r\n    // state object to render errors on UI if blank fields are present on a submit attempt:\r\n    const [formBlanks, setFormBlanks] = useState({\r\n        sex: false,\r\n        age: false,\r\n        hyper: false,\r\n        heart: false,\r\n        married: false,\r\n        worktype: false,\r\n        restype: false,\r\n        glucose: false,\r\n        bmi: false,\r\n        smoking: false\r\n    });\r\n\r\n    // state object to render errors on UI if bad inputs are found in any fields on a submit attempt:\r\n    const [formBadInputs, setFormBadInputs] = useState({\r\n        age: false,\r\n        bmi: false,\r\n        glucose: false\r\n    });\r\n\r\n\r\n    // state object to render error on UI if error occurs fetching results from server:\r\n    const [fetchErrorMsg, setFetchErrorMsg] = useState(\"\");\r\n\r\n    // use of state object to render list of all question errors after an attempted submission:\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // helper dictionary object for the above 'errors' useState hook.\r\n    // used for obtaining question number for each type of error. This occurs in an IIFE in the render body.\r\n    const questions = {\r\n        'sex':'1', \r\n        'age':'2', \r\n        'hyper':'3', \r\n        'heart':'4', \r\n        'married':'5',\r\n        'worktype':'6',\r\n        'restype':'7',\r\n        'glucose':'8',\r\n        'bmi':'9',\r\n        'smoking':'10'\r\n    };\r\n\r\n    // ref to results text box, to scroll it into view:\r\n    const resultsRef = useRef();\r\n\r\n    const scrollToResultsBox = () => {\r\n        resultsRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    const [resultsShown, setResultsShown] = useState(false);\r\n\r\n    // useEffect to scroll to resultsBox once it is rendered.\r\n    useEffect(() => {\r\n        if (resultsShown) {\r\n            scrollToResultsBox();\r\n        }\r\n    }, [resultsShown]);\r\n\r\n\r\n\r\n\r\n    const handleFormChange = (event) => {\r\n        try {\r\n            const { name, value } = event.target;\r\n            // console.log(event.target);\r\n            // console.log(name, value);\r\n\r\n            // console.log(\"before\", formData);\r\n\r\n            // adjust glucose to unknown or not unknown, if the unknown box is checked or unchecked:\r\n            if (name === \"glucoseunknown\") {\r\n                setGlucoseUnknown((prevVal) => !prevVal);\r\n                return;\r\n            }\r\n\r\n            setFormData((prevValue) => {\r\n                    const form = {...prevValue};\r\n                    form[name] = value;\r\n\r\n                    // also add the glucose value to the temp property, to reapply this\r\n                    // value if the unknown box is unchecked:\r\n                    if (name === \"glucose\") form[\"prevGlucoseVal\"] = value;\r\n\r\n                    return form;\r\n            });\r\n\r\n\r\n            // &@)&)&)@&)@& --- below is used to throw a runtime error, for testing:\r\n            // BREAKING!!!!!!!!! OMG\r\n            // let nyorm = Float32Array(Event/32);\r\n            // console.log(nyorm);\r\n\r\n            // console.log(\"after\", formData);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'assessment form data';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n    \r\n    // a useEffect hook to only update the checkbox's representative boolean if it is changed.\r\n    // this may or may not be set up right.\r\n    useEffect(useCallback(() => {\r\n\r\n        if (glucoseUnknown) {\r\n            setDisableGlucose(true);\r\n            setFormData((prevValue) => {\r\n                const form = {...prevValue};\r\n                form[\"glucose\"] = 123.6;\r\n\r\n                return form;\r\n            });\r\n        }\r\n        else {\r\n            setDisableGlucose(false);\r\n            setFormData((prevValue) => {\r\n                const form = {...prevValue};\r\n                form[\"glucose\"] = form[\"prevGlucoseVal\"];\r\n            \r\n                return form;\r\n            });\r\n        }\r\n    \r\n        // console.log(\"this executed.\" + new Date().toString());\r\n            //console.log(\"glucose unknown changed:\", glucoseUnknown);\r\n        }), [glucoseUnknown]);\r\n\r\n\r\n\r\n    // validate input, and make a call to submit if valid\r\n    const validateInput = (event) => {\r\n\r\n        // prevent default 'submit' action page refresh:\r\n        event.preventDefault();\r\n\r\n        // dismiss any old server error messages:\r\n        setFetchErrorMsg(\"\");\r\n\r\n        // reset all form blank error statuses from any prior submissions:\r\n        setFormBlanks({\r\n            sex: false,\r\n            age: false,\r\n            hyper: false,\r\n            heart: false,\r\n            married: false,\r\n            worktype: false,\r\n            restype: false,\r\n            glucose: false,\r\n            bmi: false,\r\n            smoking: false\r\n        });\r\n\r\n        // reset any form bad input errors:\r\n        setFormBadInputs({\r\n            age: false,\r\n            bmi: false,\r\n            glucose: false\r\n        });\r\n\r\n        // clear the overall error list at the Submit button.\r\n        setErrors([]);\r\n\r\n        // clear any old assessment results:\r\n        setResults({\r\n            proba: '',\r\n            classify: ''\r\n        });\r\n\r\n\r\n        // start with assuming input is valid until proven otherwise:\r\n        let inputValid = true;\r\n\r\n        // status object to be updated in the for loop below if any of the number input fields are blank:\r\n        const specialFieldsBlank = {\r\n            'age': false, \r\n            'glucose': false, \r\n            'bmi': false\r\n        };\r\n\r\n\r\n        // form object to receive all updates from the below loop and then set the state of the formBlanks object\r\n        // const form = {};\r\n        // or, maybe i can just figure out whether React automatically batches these updates together.\r\n\r\n        for (const property in formData) {\r\n\r\n            // skip the prevGlucoseVal property:\r\n            if (property === 'prevGlucoseVal') continue;\r\n\r\n\r\n            // if a falsy (i.e. blank, for this purpose) value is found, \r\n            // locate the corresponding property in the formErrors state object:\r\n            if (!!formData[property] === false) {\r\n\r\n                // mark input as invalid to block submit:\r\n                inputValid = false;\r\n\r\n                let correspondingProperty = Object.keys(formBlanks).find(el => el === property);\r\n\r\n                // Note: ...does React automatically batch these updates together? It's a lot of calls to setState across the loop, in the worst case.\r\n\r\n                // add the blank field's status to the state object:\r\n                setFormBlanks(oldVal => {\r\n                    const form = {...oldVal};\r\n                    form[correspondingProperty] = true;\r\n                    return form;\r\n                });\r\n\r\n                // add the blank field's status to the overall errors state object:\r\n                setErrors((oldVal) => {\r\n                    const errorList = [...oldVal, correspondingProperty];\r\n                    return errorList;\r\n                })\r\n\r\n                // if the erring field is also one of the keys of the specialFieldsBlank object,\r\n                // set the value of the matching specialFieldsBlank key to true - the field is blank.\r\n                // this way, the field's logic won't be tested if it is already known to be blank.\r\n                if (Object.keys(specialFieldsBlank).includes(correspondingProperty)) {\r\n                    specialFieldsBlank[correspondingProperty] = true;\r\n                }\r\n                \r\n            }\r\n\r\n        }\r\n\r\n        // now that blank inputs have been captured:\r\n        // if the text input fields are not blank - they need their logic checked.\r\n\r\n        // formBadInputs - a State object to hold logic error statuses for age, bmi, and glucose fields.\r\n        // run a logic check on the 3 applicable text input fields:\r\n        // age, bmi, and glucose - illogical info can be typed into those 3 fields.\r\n\r\n        // use regExes to test the logic of each field.\r\n        \r\n        // first, a regEx for the age field.\r\n        // a regEx requiring that the age number entry:\r\n        //     - start with a digit between 1 and 9\r\n        //     - can be followed by zero to two digits (from 0-9; number can only be 3 digits long)\r\n        //     - ends after the last digit\r\n\r\n        // if the age field was not found to be blank:\r\n        if (!specialFieldsBlank['age']) {\r\n            let ageRegex = /^[1-9]\\d{0,2}$/;\r\n\r\n            // if the age field fails the age regex test:\r\n            if (!ageRegex.test(formData['age'])) {\r\n\r\n                // mark input as invalid to block submit:\r\n                inputValid = false;\r\n\r\n                setFormBadInputs(oldVal => {\r\n                    const form = {...oldVal};\r\n                    form['age'] = true;\r\n                    return form;\r\n                });\r\n                setErrors((oldVal) => {\r\n                    const errorList = [...oldVal, 'age'];\r\n                    return errorList;\r\n                });\r\n            }\r\n        }\r\n\r\n        // for the other 2 text input fields, age and bmi:\r\n        // the avg. glucose and bmi fields can both be either whole or decimal numbers.\r\n        // the fields are both limited to 5 characters.\r\n        // test the avg. glucose & bmi entry with 2 regEx's: \r\n        // one to test for a whole number, and another to test for a decimal number.\r\n        // if neither regEx tests true for an input in one of these 2 fields - the input is not valid.\r\n        // given that, the glucose and bmi fields each accept only whole or decimal numbers.\r\n\r\n        // 1st of 2 regExes - test for whole number of up to 5 total digits:\r\n            // - start w/ 1-9\r\n            // - can be followed by up to 4 digits\r\n        let wholeNumRegex = /^[1-9]\\d{0,4}$/;\r\n    \r\n        // 2nd of 2 regExes - test for decimal number of range 0.0 to 999.9, with variant forms depending on whole portion:\r\n            // - start w/ 1-9\r\n            // - can be followed by up to 2 digits, then 1 decimal point,  \r\n            // - then from 1 to 3 tenths-place digits.\r\n        \r\n        let decimalRegex = /^[1-9]\\d{0,2}\\.\\d{1,3}$/;\r\n\r\n\r\n        // if glucose field is not blank, apply the regExes to test the value:\r\n        if (!specialFieldsBlank['glucose']) {\r\n\r\n            console.log(wholeNumRegex.test(formData['glucose']));\r\n            console.log(decimalRegex.test(formData['glucose']));\r\n\r\n            // if neither of the regEx's have a passing test for the entry,\r\n            // consider the entry invalid - the input is not in the correct format.\r\n            if (!wholeNumRegex.test(formData['glucose']) && !decimalRegex.test(formData['glucose'])) {\r\n\r\n                // mark input as invalid to block submit:\r\n                inputValid = false;\r\n\r\n                setFormBadInputs(oldVal => {\r\n                    const form = {...oldVal};\r\n                    form['glucose'] = true;\r\n                    return form;\r\n                });\r\n                setErrors((oldVal) => {\r\n                    const errorList = [...oldVal, 'glucose'];\r\n                    return errorList;\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // if bmi field is not blank, apply the regExes to test the value:\r\n        if (!specialFieldsBlank['bmi']) {\r\n\r\n\r\n            console.log(wholeNumRegex.test(formData['bmi']));\r\n            console.log(decimalRegex.test(formData['bmi']));\r\n\r\n            // if neither of the regEx's have a passing test for the entry,\r\n            // consider the entry invalid - the input is not in the correct format.\r\n            if (!wholeNumRegex.test(formData['bmi']) && !decimalRegex.test(formData['bmi'])) {\r\n\r\n                // mark input as invalid to block submit:\r\n                inputValid = false;\r\n\r\n                setFormBadInputs(oldVal => {\r\n                    const form = {...oldVal};\r\n                    form['bmi'] = true;\r\n                    return form;\r\n                });\r\n                setErrors((oldVal) => {\r\n                    const errorList = [...oldVal, 'bmi'];\r\n                    return errorList;\r\n                });\r\n            }\r\n        }\r\n\r\n        \r\n        console.log('input valid:', inputValid);\r\n\r\n        // actually submit the data if all input is found to be valid:\r\n        if (inputValid) sendAssessmentData(event);\r\n    };\r\n\r\n\r\n    const sendAssessmentData = (event) => {\r\n\r\n        // reset the resultsShown state boolean:\r\n        setResultsShown(false);\r\n        \r\n        // to test, copy the form state object using .assign() and change the value of a key:\r\n        // let theBadForm = {};\r\n        // Object.assign(theBadForm, formData);\r\n        // console.log('look I am evil:', theBadForm);\r\n        // theBadForm.age = 'a123';\r\n        // console.log('and now look what I have done to my value, b:', theBadForm);\r\n\r\n        // the fetch request is supposed to have \r\n        // body: JSON.stringify(formData)\r\n        // but for testing...it will send 'theBadForm'\r\n\r\n        fetch(BASE_URL + 'assessment', {\r\n            method: \"POST\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        }).then(res => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            // if the res status is 422, the fetch was likely missing a token.\r\n            // so perform an autologout if that happens.\r\n            else if (res.status === 422 || res.status === 401) {\r\n                authCtx.logout(true);\r\n            }\r\n            else {\r\n                // console.log(\"the response from the server was NOT ok.\");\r\n                // console.log(res.json());\r\n                setFetchErrorMsg(\"Something went wrong with receiving the assessment results from the server. Please try again.\");\r\n\r\n                // do not proceed to display the data info if there was an error submitting the data to the server.\r\n                // just return out of the function.\r\n                return;\r\n            }\r\n        }).then(data => {\r\n\r\n            // if the response's data has an 'error' property, the server has encountered an error processing the data.\r\n            if (data.error) {\r\n\r\n                setFetchErrorMsg(\"Something went wrong with receiving the assessment results from the server. Please try again.\");\r\n                // do not proceed to display the data info if there was an error on the server. exit the function.\r\n                return;\r\n            }\r\n\r\n            console.log('content of `data`:', JSON.stringify(data))\r\n            // console.log(data);\r\n\r\n            setResults({\r\n                proba: data.proba,\r\n                classify: data.classify\r\n            });\r\n            setResultsShown(true);\r\n        }).catch(error => {\r\n            \r\n            error.cause = 'submit assessment fetch request';\r\n            logToErrorQueue(error);\r\n\r\n            setFetchErrorMsg(\"Something went wrong with sending the assessment to the server. Please try again.\");\r\n            \r\n        });\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    // let isNotDismissed = \"flex\";\r\n    // const closeMessage = () => {\r\n    //     isNotDismissed = \"none\";\r\n    // };\r\n\r\n    // className={styles.assessmentWrapper}\r\n    return (\r\n    \r\n    <div className=\"assessmentWrapper\">\r\n\r\n        <div className='disclaimerWrapper'>\r\n            <h3>Disclaimer</h3>\r\n            <hr/>\r\n            <p>This website and the below assessment are not intended to diagnose, prevent, or treat any real medical condition. The material presented is part of an educational undertaking. <br/> <br/>Please consult a doctor for any advice regarding diagnosis, prevention, or treatment of strokes and/or related conditions. </p>\r\n        </div>\r\n\r\n\r\n        <h1 className=\"assessmentHeader\">Patient Assessment</h1>\r\n        \r\n        \r\n    <form>\r\n\r\n    {/* Debug element - to view state of formData */}\r\n    \r\n    {/* className={styles.wrapper} */}\r\n    <div >\r\n        {/* <p>{JSON.stringify(formData)}</p> */}\r\n    </div>\r\n\r\n\r\n    <div id=\"assessmentSpace\"></div>\r\n\r\n \r\n\r\n    {formBlanks['sex'] && <div className=\"message\">\r\n    <span>Please select one of the options before submitting.</span>\r\n    </div>}\r\n        <QuestionBlock question=\"Select the patient's biological sex.\" questionNumber=\"1\">\r\n            <BinaryQuestionRadio onRadioChange={handleFormChange} radioGroupName=\"sex\" radioVal1=\"male\" radioVal2=\"female\"\r\n                radioVal1Text=\"Male\" radioVal2Text=\"Female\"\r\n            />\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['age'] && <div className=\"message\"><span>\r\n                Please enter an age value before submitting.\r\n            </span></div>}\r\n            {formBadInputs['age'] && <div className=\"message\"><span>\r\n                Age must be a number.\r\n            </span></div>}\r\n        <QuestionBlock question=\"Enter the patient's age.\" questionNumber=\"2\">\r\n            <NumericalQuestionInput onValueChange={handleFormChange} name=\"age\" placeholder={\"27\"} maxLength={'3'}/>\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['hyper'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}\r\n        <QuestionBlock question=\"Does the patient have a history of hypertension?\" questionNumber=\"3\">\r\n            <BinaryQuestionRadio onRadioChange={handleFormChange} radioGroupName=\"hyper\" radioVal1=\"hyperYes\" radioVal2=\"hyperNo\"\r\n                radioVal1Text=\"Yes\" radioVal2Text=\"No\"\r\n            />\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['heart'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}\r\n        <QuestionBlock question=\"Does the patient have a history of heart disease?\" questionNumber=\"4\">\r\n            <BinaryQuestionRadio onRadioChange={handleFormChange} radioGroupName=\"heart\" radioVal1=\"heartYes\" radioVal2=\"heartNo\"\r\n                radioVal1Text=\"Yes\" radioVal2Text=\"No\"\r\n            />\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['married'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}\r\n        <QuestionBlock question=\"Is/was the patient currently or ever married?\" questionNumber=\"5\">\r\n            <BinaryQuestionRadio onRadioChange={handleFormChange} radioGroupName=\"married\" radioVal1=\"marryYes\" radioVal2=\"marryNo\"\r\n                radioVal1Text=\"Yes\" radioVal2Text=\"No\"\r\n            />\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['worktype'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}\r\n        <QuestionBlock question=\"Select the option that best describes the patient's occupation type.\" questionNumber=\"6\">\r\n            <TernaryQuestionSelect name=\"worktype\" options={worktypes}\r\n            onSelectChange={handleFormChange}\r\n            />\r\n        </QuestionBlock>\r\n\r\n        {formBlanks['restype'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}\r\n        <QuestionBlock question=\"Select the option that best describes the patient's area of residence.\" questionNumber=\"7\">\r\n            <BinaryQuestionRadio onRadioChange={handleFormChange} radioGroupName=\"restype\" radioVal1=\"rural\" radioVal2=\"urban\"\r\n                radioVal1Text=\"Rural\" radioVal2Text=\"Urban\"\r\n            />\r\n        </QuestionBlock>\r\n\r\n        \r\n        {/* style={ {backgroundColor: 'black'} }  */}\r\n\r\n        {formBlanks['glucose'] && <div className=\"message\"><span>Please enter an average glucose value (or check \"Unknown\") before submitting.</span></div>}\r\n        {formBadInputs['glucose'] && <div className=\"message\"><span>Average glucose must be a whole or decimal number.</span></div>}\r\n        <QuestionBlock question=\"Enter the patient's average glucose levels (mg/dL) if known. Select &quot;Unknown&quot; if not known, and an average will be used.\" questionNumber=\"8\">\r\n            <NumericalQuestionInput className=\"glucoseInput\" isDisabled={glucoseDisabled} name=\"glucose\" placeholder={glucoseDisabled ? \"\" : \"100.0\"} onValueChange={handleFormChange} maxLength={'5'} />\r\n            <div className=\"checkBoxLabelWrapper\">\r\n            <label className=\"pointer\" htmlFor=\"glucoseunknown\">Unknown</label><input className=\"pointer\" type=\"checkbox\" id=\"glucoseunknown\" name=\"glucoseunknown\" onChange={handleFormChange}></input>\r\n            </div>\r\n        </QuestionBlock>\r\n\r\n{/*         {formErrors['age']['err'] && <div className=\"message\"><span>\r\n                {formErrors['age']['errType'] === 'blank' && ('Please type in an age value before submitting.')} */}\r\n        \r\n        {formBlanks['bmi'] && <div className=\"message\"><span>Please enter a BMI value before submitting.</span></div>}\r\n        {formBadInputs['bmi'] && <div className=\"message\"><span>BMI must be a whole or decimal number.</span></div>}\r\n        <QuestionBlock question=\"Enter the patient's BMI (Body Mass Index.)\" questionNumber=\"9\">\r\n            <NumericalQuestionInput name=\"bmi\" placeholder={\"22.5\"} onValueChange={handleFormChange} maxLength={'5'}/>\r\n        </QuestionBlock>\r\n\r\n\r\n        {formBlanks['smoking'] && <div className=\"message\"><span>Please select one of the options before submitting.</span></div>}        \r\n        <QuestionBlock question=\"Select the option that best describes the patient's smoking status.\" questionNumber=\"10\">\r\n            <TernaryQuestionSelect name=\"smoking\" options={smoking} onSelectChange={handleFormChange}/>\r\n        </QuestionBlock>\r\n\r\n\r\n    {/* if any errors are present on any of the inputs, this throws to the UI */}\r\n    {(Object.values(formBlanks).some(el => el === true) || Object.values(formBadInputs).some(el => el === true)) &&\r\n        <div className=\"submitInfo\">\r\n            {/* <span onClick={closeMessage}>X</span> */}\r\n            <p>Please fix the following questions before submitting:</p>\r\n            {/* <p>{errors}, <br/> {errors.length}</p> */}\r\n            {/* use of an IIFE to map each incorrect question type (age, etc.) to its respective question number */}\r\n            <p> {\r\n                (() => {\r\n                let numberList = [];\r\n                errors.forEach((el) => {\r\n                    console.log(questions[el]);\r\n                    numberList.push(questions[el]);\r\n                });\r\n                {/* sort the numberList: */}\r\n                {/* sort the array in ascending numerical value order (not ASCII character order, the weird cardinal sort) */}\r\n                numberList = numberList.sort((a, b) => a - b);\r\n                {/* return the string repr. of the array, and add a space after any commas: */}\r\n                return numberList.toString().replace(/\\,/g, \", \");\r\n            })()\r\n            }</p>\r\n        </div>\r\n    }\r\n\r\n    <div id=\"assessmentSpace\"></div>\r\n\r\n        <button onClick={validateInput} type=\"submit\">Submit Assessment</button>\r\n\r\n    </form>\r\n\r\n    {fetchErrorMsg !== '' && (\r\n        <div className=\"submitInfo\">\r\n            <p>{fetchErrorMsg}</p>\r\n        </div>)\r\n        }\r\n\r\n        \r\n    <div id=\"assessmentSpace\"></div>\r\n\r\n\r\n        {results.proba !== \"\" && (<>\r\n        <div className=\"resultsContainer\" onLoad={scrollToResultsBox} ref={resultsRef}>\r\n        <h2>Assessment Results</h2>\r\n        <hr/>\r\n            <span className=\"resultsLarge\">{results.proba}</span>\r\n            <span className=\"caption\">Calculated current likelihood of stroke in lifetime of patient</span>\r\n            \r\n            <p>Based on the patient's data, the patient is <u>{results.proba}</u> likely to have a stroke in their lifetime.</p>\r\n            \r\n            {results.classify === 1 && (<span>Given the assessment results, <br/> <u>the patient is at an increased risk of having a stroke.</u> <br/> <br/> The patient should be given medical advice on how to lower their current stroke risk.</span>)}\r\n            \r\n            {results.classify === 0 && (<span>Given the assessment results,<br/> <u>the patient is not at immediate risk of having a stroke.</u> \r\n            <br/>\r\n            <br/>\r\n            The patient should simply continue to practice healthy lifestyle habits in order to ensure their risk of stroke remains low.</span>)}\r\n        </div>\r\n        <div className=\"spacing\"></div>\r\n        </>)}\r\n\r\n\r\n    {/* <Results percentProba={results.proba} classify={results.classify} /> */}\r\n\r\n    </div>);\r\n};\r\n\r\n    {/* <div className='debug'>\r\n    <p><u>testing</u></p>\r\n    <p><u>blanks</u></p>\r\n    <p>exhibit 1: {'' + Object.values(formBlanks).some(el => el === true)} </p>\r\n    <p>xzibit 2: {'' + Object.values(formBadInputs).some(el => el === true)} </p>\r\n    \r\n    <p>{JSON.stringify(formBlanks)}</p>\r\n    <p><u>bad inputs</u></p>\r\n    <p>{JSON.stringify(formBadInputs)}</p>\r\n    </div> */}\r\n\r\nexport default Assessment;","import { useEffect, useState, useRef } from \"react\";\r\nimport {logToErrorQueue} from \"../Logger\";\r\n\r\nconst QueryStatement = (props) => {\r\n\r\n    const [isNumericAttr, setIfNumericAttr] = useState(true);\r\n\r\n    // const [statementData, setStatementData] = useState({\r\n    //     'statement_id': 0,\r\n    //     'type': 'base',\r\n    //     'chaining_op': null,\r\n    //     'attribute': 'id',\r\n    //     'operator': 'equals',\r\n    //     'attributeval': null\r\n    // });\r\n\r\n    const operatorRef = useRef(null);\r\n\r\n\r\n    let baseQuery;\r\n    \r\n    // const form = {...prevValue};\r\n    // form[name] = value;\r\n\r\n    // return form;\r\n    if (props.type === \"BASE\") {\r\n        baseQuery = true;\r\n    }\r\n    else if (props.type === \"ANDOR\") {\r\n        baseQuery = false;\r\n    }\r\n\r\n    const numericAttrs = ['id', 'age', 'avg_glucose', 'bmi'];\r\n\r\n    const setOperators = (event) => {\r\n        try { \r\n            const selectedAttr = event.target.value;\r\n            if (numericAttrs.includes(selectedAttr)) {\r\n                setIfNumericAttr(true);\r\n            }\r\n            else {\r\n                \r\n                setIfNumericAttr(false);\r\n            }\r\n        }\r\n        catch (error) {\r\n            error.cause = 'QueryStatement event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n          \r\n        // props.onAdded();\r\n        //props.onAdded(statementData);\r\n\r\n    }, []); // I don't feel like I am using this right. I question the empty dep. array too.\r\n\r\n    const handleStatementChange = (event) => {\r\n        try {\r\n            const { name, value } = event.target;\r\n            // console.log(event.target);\r\n            // console.log(name, value);\r\n            \r\n            if (name === 'attribute') {\r\n                setOperators(event);\r\n                // and also, reset the selected operator option to 'is equal to'? \r\n                // operatorRef.current.select(null);\r\n            }\r\n\r\n            props.onStatementChange(event, props.id);\r\n            // props.onStatementChange(event);\r\n            //props.onStatementChange(event, statementData);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'QueryStatement event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n\r\n    return (<div className=\"querySentence\">\r\n    {baseQuery ? <p>Select all patients where:</p> : (\r\n    <select id=\"chainOp\" onChange={handleStatementChange} name=\"chaining_op\">\r\n        <option>and</option>\r\n        <option>or</option>\r\n    </select>\r\n        )}\r\n    <select onChange={handleStatementChange} name=\"attribute\" className=\"selectField\">\r\n        <option value=\"id\">Id No.</option>\r\n        <option value=\"sex\">Gender</option>\r\n        <option value=\"age\">Age</option>\r\n        <option value=\"hyper\">Hypertension</option>\r\n        <option value=\"heart_d\">Heart Disease</option>\r\n        <option value=\"ever_married\">Ever Married</option>\r\n        <option value=\"worktype\">Work Type</option>\r\n        <option value=\"restype\">Residence Type</option>\r\n        <option value=\"avg_glucose\">Avg. Blood Glucose, mg/dL</option>\r\n        <option value=\"bmi\">BMI (Body Mass Index)</option>\r\n        <option value=\"smoking\">Smoking Status</option>\r\n        <option value=\"stroke\">Had Stroke</option>\r\n    </select>\r\n    {/* ref={operatorRef}  */}\r\n    <select onChange={handleStatementChange} name=\"operator\" className=\"selectField\">\r\n        {/* selected  */}\r\n        <option value=\"equals\">is equal to</option>\r\n        <option value=\"notequals\">is not equal to</option>\r\n        {isNumericAttr && <>\r\n            {/* 'greaterthan', 'lessthan', 'greaterthanequal', 'lessthanequal' */}\r\n            <option value=\"greaterthan\">is greater than</option>\r\n            <option value=\"lessthan\">is less than</option>\r\n            <option value=\"greaterthanequal\">is greater than or equal to</option>\r\n            <option value=\"lessthanequal\">is less than or equal to</option>\r\n        </>}\r\n        <option value=\"contains\">contains</option>\r\n        <option value=\"notcontains\">does not contain</option>\r\n    </select>\r\n    <input onBlur={handleStatementChange} name=\"attributeval\" type=\"text\"></input>\r\n    {/* <p>{statementData['type']}</p> */}\r\n    </div>);\r\n};\r\n\r\nexport default QueryStatement;","import { useEffect, useState, useContext, useRef, useCallback, useMemo } from \"react\";\r\nimport \"./components/patients\";\r\nimport \"./styles/DataVisuals.css\";\r\n\r\nimport Plotly from \"plotly.js-cartesian-dist\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\n// this seems to crash the compiler:\r\n// import Plot from 'react-plotly.js';\r\n\r\nimport QueryStatement from \"./components/QueryStatement\";\r\n\r\n\r\nimport AuthContext from \"./store/auth_context\";\r\n\r\nimport { BASE_URL } from \"./store/environment\";\r\nimport { logToErrorQueue } from \"./Logger\";\r\n\r\n\r\nimport TouchContext from \"./store/touch_context\";\r\n\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst DataVisuals = () => {\r\n\r\n    const authCtx = useContext(AuthContext);\r\n\r\n    const [patientData, setPatientData] = useState([]);\r\n\r\n    const [customQueryData, setCustomQueryData] = useState([]);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isExpanded, setExpanded] = useState(true);\r\n\r\n    const [isCustomExpanded, setCustomExpanded] = useState(false);\r\n\r\n    const [queryData, setQueryData] = useState(\r\n        {\"0\": \r\n            {\r\n                'statement_id': 0,\r\n                'type': 'base',\r\n                'chaining_op': null,\r\n                'attribute': 'id',\r\n                'operator': 'equals',\r\n                'attributeval': null\r\n            }\r\n        });\r\n\r\n    const [error, setError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n\r\n// disused plotLoading state hooks:\r\n \r\n    const [plot1loading, setPlot1Loading] = useState(false);\r\n    const [plot2loading, setPlot2Loading] = useState(false);\r\n    const [plot3loading, setPlot3Loading] = useState(false);\r\n    const [plot4loading, setPlot4Loading] = useState(false);\r\n    const [plot5loading, setPlot5Loading] = useState(false);\r\n    const [custPlotLoading, setCustPlotLoading] = useState(false);\r\n\r\n\r\n    // bg colors for the interactive plot switch buttons:\r\n    const plotSwitchOnColor = '#FFF';\r\n    const plotSwitchOffColor = '#000';\r\n\r\n\r\n\r\n\r\n    const [activeCustPlot, setActiveCustPlot] = useState('bp');\r\n\r\n    const [plot1, setPlot1] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n    const [plot2, setPlot2] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n    const [plot3, setPlot3] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n    const [plot4, setPlot4] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n    const [plot5, setPlot5] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n    const getData = () => {\r\n\r\n        setPatientData([]);\r\n        // console.log(\"getting full patient data:\");\r\n\r\n        // setIsLoading(true);\r\n\r\n        fetch((BASE_URL + 'api/patients'), \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        }).then(res => {\r\n            \r\n            if (res.ok) {\r\n            return res.json();\r\n            }\r\n            // if the res status is 422, the fetch was likely missing a token.\r\n            // so perform an autologout if that happens.\r\n            else if (res.status === 422 || res.status === 401) {\r\n                authCtx.logout(true);\r\n            }\r\n            else {\r\n                let err = new Error('something went wrong getting the patient data from the server.');\r\n                throw err;\r\n            }\r\n            \r\n            }\r\n        ).then(data => {\r\n\r\n\r\n            // if the received data does NOT have an error message property included:\r\n            if (!data.hasOwnProperty('errormsg')) {\r\n\r\n                console.log('it\\'s set');\r\n\r\n                setPatientData(data);\r\n            }\r\n            else {\r\n                console.log(data['errormsg']);\r\n            }\r\n            \r\n            // setIsLoading(false);\r\n\r\n        }\r\n        ).catch(error => {\r\n            error.cause = \"patient data fetch request\";\r\n            logToErrorQueue(error);\r\n        });\r\n\r\n\r\n    };\r\n\r\n    const initBarPlot1 = (dataSource = patientData, custom = false) => {\r\n\r\n        // // filter the values out of patientData?\r\n        // // stroke == 0 && stroke == 1?\r\n        // const strokeNeg = patientData.filter(dataRow => dataRow.stroke == 0);\r\n        // console.log(strokeNeg.length);\r\n\r\n        // and then, get the counts of which ones are hyper == 0 and hyper == 1:\r\n        const strokeNegHyperNeg = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 0 && dataRow.hyper === 0); \r\n        });\r\n        // console.log(\"0, 0 ->\", strokeNegHyperNeg.length);\r\n\r\n        const strokeNegHyperPos = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 0 && dataRow.hyper === 1); \r\n        });\r\n        // console.log(\"0, 1 ->\", strokeNegHyperPos.length);\r\n\r\n        const strokePosHyperNeg = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 1 && dataRow.hyper === 0);\r\n        });\r\n        // console.log(\"1, 0 ->\", strokePosHyperNeg.length);\r\n\r\n        const strokePosHyperPos = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 1 && dataRow.hyper === 1);\r\n        });\r\n        // console.log(\"1, 1 ->\", strokePosHyperPos.length);\r\n\r\n\r\n        const trace1 = {\r\n            x: ['Never had stroke', 'Had stroke in lifetime'],\r\n            y: [strokeNegHyperNeg.length, strokePosHyperNeg.length],\r\n            name: 'Not hypertensive',\r\n            type: 'bar'\r\n        };\r\n\r\n        const trace2 = {\r\n            x: ['Never had stroke', 'Had stroke in lifetime'],\r\n            y: [strokeNegHyperPos.length, strokePosHyperPos.length],\r\n            name: 'Hypertensive',\r\n            type: 'bar'\r\n        };\r\n\r\n        const data = [trace1, trace2];\r\n\r\n        const layout = {\r\n            barmode: 'group',\r\n            title: 'Stroke Frequency by Blood Pressure Status',\r\n            // margin: initMargin,\r\n            // font: {\r\n            //     size: initPlotFontSize\r\n            // }\r\n        };\r\n\r\n        const config = {responsive: true};\r\n\r\n\r\n\r\n        if (!custom) {\r\n            setPlot3({\r\n                data: data,\r\n                layout: layout,\r\n                config: config\r\n            });\r\n        }\r\n        else {\r\n            setCustPlot({\r\n                data: data,\r\n                layout: layout,\r\n                config: config\r\n            });\r\n        }\r\n\r\n        setPlot3Loading(false);\r\n\r\n    };\r\n\r\n    const toPatientDataString = (dataRow) => {\r\n        const id = dataRow.id;\r\n        const gender = dataRow.gender;\r\n        const age = dataRow.age;\r\n        const hyper = dataRow.hyper;\r\n        const heart_d = dataRow.heart_d;\r\n        const avg_glucose = dataRow.avg_glucose;\r\n        const bmi = dataRow.bmi;\r\n        const stroke = dataRow.stroke;\r\n        return (\r\n            `id#: ${id}; gender: ${gender}; age: ${age}; hyper: ${hyper}; heart_d: ${heart_d}; avg_glucose: ${avg_glucose}; bmi: ${bmi}`\r\n        );\r\n    }\r\n\r\n    const initBarPlot2 = (dataSource = patientData, custom = false) => {\r\n        \r\n        // // filter the values out of patientData\r\n        // // stroke === 0 && stroke === 1\r\n\r\n        // and then, get the counts of which ones are heart_d === 0 and heart_d === 1:\r\n        const strokeNegHeartNeg = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 0 && dataRow.heart_d === 0); \r\n        });\r\n  \r\n        const strokeNegHeartPos = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 0 && dataRow.heart_d === 1); \r\n        });\r\n\r\n        const strokePosHeartNeg = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 1 && dataRow.heart_d === 0);\r\n        });\r\n\r\n        const strokePosHeartPos = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 1 && dataRow.heart_d === 1);\r\n        });\r\n\r\n        const trace1 = {\r\n            x: ['Never had stroke', 'Had stroke in lifetime'],\r\n            y: [strokeNegHeartNeg.length, strokePosHeartNeg.length],\r\n            name: 'No Heart Disease',\r\n            type: 'bar',\r\n            marker: { color: 'green' }\r\n        };\r\n\r\n        const trace2 = {\r\n            x: ['Never had stroke', 'Had stroke in lifetime'],\r\n            y: [strokeNegHeartPos.length, strokePosHeartPos.length],\r\n            name: 'Has Heart Disease',\r\n            type: 'bar',\r\n            marker: { color: 'salmon' }\r\n        };\r\n\r\n        const data = [trace1, trace2];\r\n\r\n        const layout = {\r\n            barmode: 'group',\r\n            title: 'Stroke Frequency by Heart Disease Status'\r\n        };\r\n\r\n        const config = {responsive: true};\r\n\r\n        // Plotly.newPlot(plotLoc, data, layout, config);\r\n\r\n        if (!custom) {\r\n            setPlot4({\r\n                data: data,\r\n                layout: layout,\r\n                config: config\r\n            });\r\n        }\r\n        else {\r\n            setCustPlot(\r\n                {\r\n                    data: data, \r\n                    layout: layout, \r\n                    config: config\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n        setPlot3Loading(false);\r\n\r\n    };\r\n\r\n    const initScatterPlot = (dataSource = patientData, custom = false) => {\r\n        \r\n        // // filter the values out of patientData\r\n        // // stroke === 0 && stroke === 1\r\n\r\n        // and then, plot each with age as x, and avg. glucose as y:\r\n        const strokeNeg = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 0); \r\n        });\r\n\r\n        const strokePos = dataSource.filter(dataRow => {\r\n            return (dataRow.stroke === 1);\r\n        });\r\n\r\n        const trace1 = {\r\n            x: strokeNeg.map(dataRow => dataRow.age),\r\n            y: strokeNeg.map(dataRow => dataRow.avg_glucose),\r\n            mode: 'markers',\r\n            name: 'No Stroke',\r\n            text: strokeNeg.map(dataRow => toPatientDataString(dataRow)),\r\n            type: 'scatter',\r\n            marker: { color: 'blue' }\r\n        };\r\n\r\n        const trace2 = {\r\n            x: strokePos.map(dataRow => dataRow.age),\r\n            y: strokePos.map(dataRow => dataRow.avg_glucose),\r\n            mode: 'markers',\r\n            name: 'Had Stroke in Lifetime',\r\n            text: strokePos.map(dataRow => toPatientDataString(dataRow)),\r\n            type: 'scatter',\r\n            marker: { color: 'red' }\r\n        };\r\n\r\n        const data = [trace1, trace2];\r\n\r\n        const layout = {\r\n            title: 'Stroke Incidence as a function of Age and Average Glucose Level',\r\n            xaxis: {title: 'Age, yrs',\r\n            autotick: false,\r\n            showticklabels: true,\r\n            ticks: 'outside',\r\n            dtick: 10,\r\n            showgrid: true,\r\n            zeroline: true,\r\n            showline: true},\r\n            yaxis: {\r\n                title: 'Avg. Blood Glucose, mg/dL',\r\n                autotick: false,\r\n                showticklabels: true,\r\n                ticks: 'outside',\r\n                dtick: 50,\r\n                showgrid: true,\r\n                zeroline: true,\r\n                showline: true\r\n            },\r\n            legend: {\r\n                \"orientation\": \"h\",\r\n                y: -0.2\r\n            },\r\n            margin: {\r\n                // b: 100\r\n            }\r\n\r\n        };\r\n\r\n        const config = {responsive: true};\r\n\r\n        // Plotly.newPlot(plotLoc, data, layout, config);\r\n\r\n        setPlot4Loading(false);\r\n\r\n        if (!custom) {\r\n        setPlot2(\r\n            {\r\n                data: data, \r\n                layout: layout, \r\n                config: config\r\n            }\r\n        );\r\n        }\r\n        else {\r\n            setCustPlot(\r\n                {\r\n                    data: data, \r\n                    layout: layout, \r\n                    config: config\r\n                }\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n    // const plotRef = useRef(null);\r\n\r\n\r\n    const initHeatmap = () => {\r\n                \r\n        const xVals = ['age', 'hyper', 'heart_d', 'avg_glucose', 'bmi', 'stroke'];\r\n        const yVals = ['age', 'hyper', 'heart_d', 'avg_glucose', 'bmi', 'stroke'];\r\n        const zVals = [\r\n        [1.000000, 0.257110, 0.266740, 0.249023, -0.012788, 0.512787],\r\n        [0.257110, 1.000000, 0.094666, 0.174113, 0.113003, 0.168053],\r\n        [0.266740, 0.094666, 1.000000, 0.253447, 0.018437, 0.186316],\r\n        [0.249023, 0.174113, 0.253447, 1.000000, 0.229055, 0.230373],\r\n        [-0.012788,\t0.113003, 0.018437, 0.229055, 1.000000, -0.037703],\r\n        [0.512787, 0.168053, 0.186316, 0.230373, -0.037703, 1.000000]\r\n        ];\r\n        const colorScaleVal = [\r\n            [0, '#ffe2b0'], \r\n            [0.5, '#FFA500'],\r\n            [1, '#7d3c00']\r\n        ]\r\n        const heatmapData = [{\r\n            x: xVals,\r\n            y: yVals,\r\n            z: zVals,\r\n            type: 'heatmap',\r\n            colorscale: colorScaleVal\r\n        }];\r\n        const heatmapLayout = {\r\n            title: 'Correlation Matrix Heatmap - Major Features', \r\n            xaxis: {\r\n                automargin: true\r\n            },\r\n            annotations: [],\r\n            yaxis: {\r\n                automargin: true\r\n            },\r\n            margin: {\r\n                l: 100,\r\n                r: 110\r\n            },\r\n            autosize: true\r\n            };\r\n\r\n\r\n        // add all annotations to the plot layout constant before rendering:\r\n        for (let i = 0; i < yVals.length; i++) {\r\n            for (let j = 0; j < xVals.length; j++) {\r\n                let currentVal = zVals[i][j];\r\n\r\n                // truncate to 1 decimal\r\n                let currentValPrec;\r\n                if (Math.abs(currentVal) < 0.1) {\r\n                    currentValPrec = currentVal.toPrecision(1);\r\n                }\r\n                else {\r\n                    currentValPrec = currentVal.toPrecision(2);\r\n                }\r\n                let textColor;\r\n                if (currentVal > 0.7) {\r\n                    textColor = 'white';\r\n                }\r\n                else {\r\n                    textColor = 'black';\r\n                }\r\n                let result = {\r\n                    xref: 'x1',\r\n                    yref: 'y1',\r\n                    x: xVals[j],\r\n                    y: yVals[i],\r\n                    text: currentValPrec,\r\n                    font: {\r\n                        family: 'Questrial',\r\n                        color: 'black'\r\n                    },\r\n                    showarrow: false,\r\n                    font: {\r\n                        color: textColor\r\n                    }\r\n                };\r\n                heatmapLayout.annotations.push(result);\r\n            }\r\n        }\r\n\r\n\r\n        const config = {\r\n            // I don't even know that responsive does anything here haha:\r\n            responsive: true,\r\n            modeBarButtonsToRemove: \r\n            ['zoom2d', 'pan2d', 'select2d', 'lasso2d', 'zoomIn2d', 'zoomOut2d']\r\n        };\r\n\r\n\r\n        setPlot1({\r\n            data: heatmapData,\r\n            layout: heatmapLayout,\r\n            config: config\r\n        });\r\n\r\n\r\n        setPlot1Loading(false);\r\n\r\n    };\r\n\r\n    const initConfMatrix = () => {\r\n\r\n        const xVals = ['Will not have stroke', 'Will have stroke'];\r\n        const yVals = ['Did not have stroke', 'Had stroke'];\r\n        const zVals = [[34, 6], [9, 23]];\r\n        const colorScaleVal = [\r\n        [0, '#ffaea8'], \r\n        [0.5, '#ff5447'],\r\n        [1, '#520500']];\r\n        const heatmapData = [{\r\n            x: xVals,\r\n            y: yVals,\r\n            z: zVals,\r\n            type: 'heatmap',\r\n            colorscale: colorScaleVal\r\n        }];\r\n        const heatmapLayout = {\r\n            margin: {\r\n                t: 150,\r\n                l: 150,\r\n                r: 150,\r\n                b: 130,\r\n                pad: 4\r\n            },\r\n            title: 'Confusion Matrix - Model Performance',\r\n            annotations: [],\r\n            showlegend: true,\r\n            legend: {\r\n                x: 0,\r\n                y: 0,\r\n                traceorder: 'normal',\r\n                font: {\r\n                  family: 'sans-serif',\r\n                  size: 12,\r\n                  color: '#000'\r\n                },\r\n                bgcolor: '#E2E2E2',\r\n                bordercolor: '#FFFFFF',\r\n                borderwidth: 2\r\n              }\r\n            };\r\n\r\n        // add all annotations to the plot layout constant before rendering:\r\n        for (let i = 0; i < yVals.length; i++) {\r\n            for (let j = 0; j < xVals.length; j++) {\r\n                let currentVal = zVals[i][j];\r\n                let textColor;\r\n                if (currentVal > 25) {\r\n                    textColor = 'white';\r\n                }\r\n                else {\r\n                    textColor = 'black';\r\n                }\r\n                let result = {\r\n                    xref: 'x1',\r\n                    yref: 'y1',\r\n                    x: xVals[j],\r\n                    y: yVals[i],\r\n                    text: currentVal,\r\n                    font: {\r\n                        family: 'sans-serif',\r\n                        size: 20,\r\n                        color: textColor\r\n                    },\r\n                    showarrow: false\r\n                };\r\n                heatmapLayout.annotations.push(result);\r\n            }\r\n        }\r\n        \r\n\r\n        const config = {responsive: true};\r\n        \r\n        setPlot5({\r\n            data: heatmapData,\r\n            layout: heatmapLayout,\r\n            config: config\r\n        });\r\n\r\n        setPlot5Loading(false);\r\n    };\r\n\r\n\r\n    // \r\n    // useEffect(getData, []);\r\n    // my first attempt at cleaning up the async memory leak-causing function return. it did not work.\r\n    useEffect(() => {\r\n\r\n        let cancelled = false;\r\n        if (!cancelled) getData();\r\n\r\n        return (() => {\r\n            cancelled = true;\r\n        });\r\n    }, []);\r\n    useEffect(initConfMatrix, []);\r\n    useEffect(initHeatmap, []);\r\n\r\n    useEffect(initScatterPlot, [patientData]);\r\n\r\n    useEffect(initBarPlot1, [patientData]);\r\n\r\n    useEffect(initBarPlot2, [patientData]);\r\n\r\n\r\n    const toggleView = () => {\r\n        try {\r\n            setExpanded(prevVal => !prevVal);\r\n        }\r\n        catch (error) {\r\n            error.cause = \"toggleView event\";\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n    const toggleViewCustom = () => {\r\n        try {\r\n            setCustomExpanded(prevVal => !prevVal);\r\n        }\r\n        catch (error) {\r\n            error.cause = \"toggleViewCustom event\";\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n\r\n    // I need to examine the state update flow and see what I can change to make the re-rendering not so ugly.\r\n    // onBlur for the text field helped.\r\n    // but I wonder if there's an underlying design problem.\r\n\r\n    const nonNumericAttrs = [\"sex\", \"hyper\", \"heart_d\", \"ever_married\", \"worktype\", \"restype\", \"smoking\", \"stroke\"];\r\n\r\n    const numericAttrVals = ['greaterthan', 'lessthan', 'greaterthanequal', 'lessthanequal'];\r\n\r\n    const numericAttrs = [\"id\", \"age\", \"avg_glucose\", \"bmi\"];\r\n    \r\n\r\n    const updateQuery = (event, id) => {\r\n\r\n        try {\r\n            setQueryData((prevVal) => {\r\n                const {name, value} = event.target;\r\n                const prevQueryData = {...prevVal};\r\n\r\n                // find the updated query statement object and update it accordingly:\r\n\r\n                // this id is assigned as a prop, and accessed as a prop when the QueryStatement calls a parent function in this component. the event and the id are the parameters.\r\n                // console.log(\"id:\", id);\r\n                console.log(event.target, name, value);\r\n\r\n                // \r\n                // \r\n                // let oldAttrOp = prevQueryData[id][name];\r\n                // console.log('old val', oldAttrVal);\r\n                // \r\n                // \r\n\r\n                // if the changing datapoint is an attribute\r\n                if (name === \"attribute\") {\r\n                    console.log('NAME:', name, \"VAL:\", value);\r\n                    console.log('Old attribute name:', prevQueryData[id][name]);\r\n                    let oldAttribute = prevQueryData[id][name];\r\n                    let oldOperator = prevQueryData[id]['operator'];\r\n                    // if the old attribute was part of the numeric attributes, and the new attribute is a non-numeric attribute, AND the currently selected operator is an inequality operator\r\n                    if (numericAttrs.includes(oldAttribute) && !numericAttrs.includes(value) && numericAttrVals.includes(oldOperator)) {\r\n                        console.log('the old attribute is part of the numeric values, AND the new attribute is non-numeric, ANNNND the old operator was an inequality operator. \\n You know what to do.');\r\n                        // set the query data object's value to match the on-screen value: 'equals'\r\n                        prevQueryData[id]['operator'] = 'equals';\r\n                    }\r\n\r\n\r\n                    \r\n                    \r\n                }\r\n\r\n                prevQueryData[id][name] = value;\r\n\r\n\r\n\r\n\r\n\r\n                return prevQueryData;\r\n\r\n                });\r\n        } catch(error) {\r\n            error.cause = 'update custom query state object';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const addStatement = () => {\r\n\r\n        if (statements.length === 4) {\r\n            setError(true);\r\n            setErrorMsg(\"Max 4 query conditions allowed.\");\r\n            return;\r\n        }\r\n                \r\n        setError(false);\r\n        setStatements((prevStatements) => [...prevStatements, <QueryStatement key={statements.length} id={statements.length} \r\n        onStatementChange={updateQuery} type=\"ANDOR\"/>]);\r\n\r\n        setQueryData((prevVal) => {\r\n            const queryData = {...prevVal};\r\n            // add new statement data object to the queryData object:\r\n            queryData[statements.length] = {\r\n                'statement_id': statements.length,\r\n                'type': 'andor',\r\n                'chaining_op': 'and',\r\n                'attribute': 'id',\r\n                'operator': 'equals',\r\n                'attributeval': null\r\n            };\r\n            return queryData;\r\n        });\r\n\r\n    };\r\n\r\n    // moved to allow use of the two functions:\r\n    const [statements, setStatements] = useState([\r\n        <QueryStatement id={0} key={0} onStatementChange={updateQuery} type=\"BASE\" />\r\n    ]);\r\n\r\n    \r\n    const removeStatement = () => {\r\n        if (statements.length === 1) {\r\n            console.log(\"no added conditions to delete.\");\r\n            return;\r\n        }\r\n\r\n        setQueryData((prevVal) => {\r\n            const queryData = {...prevVal};\r\n            delete queryData[statements.length - 1];\r\n            return queryData;\r\n        });\r\n\r\n\r\n        setError(false);\r\n        setStatements((prevStatements) => {\r\n            prevStatements.splice((statements.length - 1), 1);\r\n            return [...prevStatements];\r\n        });\r\n    };\r\n\r\n    const runQuery = (event) => {\r\n        try {\r\n            event.preventDefault();\r\n            setCustomExpanded(false);\r\n            setIsLoading(true);\r\n\r\n\r\n            // console.log(queryData['0']['attributeval']);\r\n            // console.log(typeof(queryData['0']['attributeval']));\r\n\r\n            setCustomQueryData([]);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'runQuery method before fetch';\r\n            logToErrorQueue(error);\r\n        }\r\n\r\n        fetch((BASE_URL + 'api/customquery'), {\r\n            method: 'POST',\r\n            body: JSON.stringify(queryData),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`}\r\n        }).then(res => {\r\n            \r\n            // console.log(res.status, res.statusText);\r\n\r\n            if (res.ok) {\r\n            return res.json();\r\n            }\r\n            // if the res status is 422, the fetch was likely missing a token.\r\n            // so perform an autologout if that happens.\r\n            else if (res.status === 422 || res.status === 401) {\r\n                authCtx.logout(true);\r\n            }\r\n        }).then(data => {\r\n            setCustomQueryData(data);\r\n            setIsLoading(false);\r\n            setCustomExpanded(true);\r\n            console.log(data);\r\n\r\n        }).catch(error => {\r\n            error.cause = 'runQuery fetch request';\r\n            logToErrorQueue(error);\r\n        });\r\n        };\r\n\r\n\r\n    const populateCustPlot = () => {\r\n\r\n        if (activeCustPlot === 'bp') initBarPlot1(customQueryData, true);\r\n        else if (activeCustPlot === 'hd') initBarPlot2(customQueryData, true);\r\n        else if (activeCustPlot === 'avg') initScatterPlot(customQueryData, true);\r\n        \r\n    \r\n    };\r\n\r\n    \r\n    useEffect(populateCustPlot, [customQueryData, activeCustPlot]);\r\n\r\n\r\n    const handleCustPlotSelect = (e) => {\r\n        try {\r\n            const value = e.target.value;\r\n            console.log(value);\r\n\r\n            setCustPlotLoading(true);\r\n\r\n            // if value = a || b || c? else false?\r\n            if (value === 'bp')\r\n            setActiveCustPlot(value);\r\n            else if (value === 'hd')\r\n            setActiveCustPlot(value);\r\n            else if (value === 'avg')\r\n            setActiveCustPlot(value);\r\n\r\n            setCustPlotLoading(false);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'handleCustPlotSelect event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n    const [sliderVal, setSliderVal] = useState(11);\r\n\r\n    // a debounce wrapper would likely make the changes not choppy -\r\n    // and also avoid overly frequent DOM updating\r\n    // kind of necessary, unless React already has a better answer w/ hooks or something\r\n\r\n    // OR, a severely restricted set of possible values. iOS only has like 5 text sizes or whatever.\r\n\r\n    const handleSliderChange = (event) => {\r\n        try {\r\n        const {name, value} = event.target;\r\n        // console.log(name, value);\r\n        setSliderVal(value);\r\n        }\r\n        catch (error) {\r\n            error.cause = 'handleSliderChange event';\r\n            logToErrorQueue(error);\r\n        }\r\n    };\r\n\r\n    // touch context for plots:\r\n    const touchCtx = useContext(TouchContext);\r\n\r\n    const userHasTouched = touchCtx.userTouch;\r\n\r\n// useEffect to fire when the user has touched the screen for the first time.\r\n    useEffect(() => {\r\n        if (userHasTouched) {\r\n            // \r\n            console.log('Interactive mode is being disabled for all plots (first user touch received).');\r\n            // \r\n            setPlot1Interactive(false);\r\n            setPlot2Interactive(false);\r\n            setPlot3Interactive(false);\r\n            setPlot4Interactive(false);\r\n            setPlot5Interactive(false);\r\n            setCustPlotInteractive(false);\r\n\r\n        }\r\n    }, [userHasTouched]);\r\n\r\n    \r\n\r\n    const [plot1Interactive, setPlot1Interactive] = useState(true);\r\n\r\n    const togglePlot1Interactive = () => {\r\n        // console.log('toggled.');\r\n        setPlot1Interactive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [plot2Interactive, setPlot2Interactive] = useState(true);\r\n\r\n    const togglePlot2Interactive = () => {\r\n        setPlot2Interactive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [plot3Interactive, setPlot3Interactive] = useState(true);\r\n\r\n    const togglePlot3Interactive = () => {\r\n        setPlot3Interactive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [plot4Interactive, setPlot4Interactive] = useState(true);\r\n\r\n    const togglePlot4Interactive = () => {\r\n        setPlot4Interactive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [plot5Interactive, setPlot5Interactive] = useState(true);\r\n\r\n    const togglePlot5Interactive = () => {\r\n        setPlot5Interactive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [custPlotInteractive, setCustPlotInteractive] = useState(true);\r\n\r\n    const toggleCustPlotInteractive = () => {\r\n        setCustPlotInteractive((oldVal) => !oldVal);\r\n    };\r\n\r\n    const [custPlot, setCustPlot] = useState({\r\n        data: null,\r\n        layout: null,\r\n        config: null\r\n    });\r\n\r\n\r\n\r\n    return (\r\n    <div className=\"dataVisualsWrapper\">\r\n\r\n\r\n        <div className=\"space\"></div>\r\n\r\n        <h1 className=\"dataPageTitle\">Data Visualizations & Dataset</h1>\r\n        {/* <hr id=\"titleHr\"/> */}\r\n\r\n\r\n\r\n\r\n        <div className=\"space\"></div>\r\n        <h2 className=\"plotsTitle\">Plots</h2>\r\n\r\n        {/* <hr/> */}\r\n\r\n        <div className=\"infoBox\">\r\n            <div className='switchWrapper'>\r\n                <div className=\"demonstrativePlotSwitchContainer\">\r\n                    <label >interactive:</label>\r\n                    <input id=\"demonstrativeCheckbox\" className=\"interactivePlotSwitch_Off\" type=\"checkbox\" \r\n                        style={ {backgroundColor: 'teal' } }\r\n                    />\r\n                </div>\r\n            </div>\r\n            <span id=\"plotswitchcaption\">plot interactive mode switch</span>\r\n            \r\n            <span>Click or tap the interactive mode switch for each plot to toggle the plot's interactive mode.</span>\r\n\r\n        </div>\r\n\r\n        <div className=\"infoBox scrollInfo\"><p>Each plot can be scrolled horizontally to view all of its content.</p></div>\r\n  \r\n\r\n\r\n\r\n\r\n    <div className=\"plotWrapper\">\r\n        <div className=\"plotSwitchPairWrapper\">\r\n            <div className='switchWrapper'>\r\n                <div className=\"interactivePlotSwitchContainer\">\r\n                    <label htmlFor=\"plot1int\">interactive:</label>\r\n                    <input id=\"plot1int\" className={ plot1Interactive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={togglePlot1Interactive} \r\n                        style={ {backgroundColor: plot1Interactive ? plotSwitchOnColor : plotSwitchOffColor } }\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"plot1\" style={\r\n                { backgroundColor: plot1Interactive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'  }\r\n            }>\r\n\r\n                <Plot className=\"responsivePlotWidth\" data={plot1.data} layout={plot1.layout} config={plot1.config} useResizeHandler style={ {borderColor: plot1Interactive ? 'rgb(114, 87, 204)' : 'lightgrey'} }\r\n                />\r\n                <div className=\"responsivePlotWidth plot1screen\" style={ {display: plot1Interactive ? \"none\" : \"block\"} }></div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"plotSwitchPairWrapper\">\r\n        <div className='switchWrapper'>\r\n            <div className=\"interactivePlotSwitchContainer\">\r\n            <p>interactive:</p>\r\n            <input className={ plot2Interactive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={togglePlot2Interactive} \r\n                style={ {backgroundColor: plot2Interactive ? plotSwitchOnColor : plotSwitchOffColor } }\r\n            />\r\n            </div>\r\n        </div>\r\n        <div className=\"plot2 scatter\" style={ {backgroundColor: plot2Interactive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'} }>\r\n            <Plot className=\"responsivePlotWidth\" data={plot2.data} layout={plot2.layout} config={plot2.config} useResizeHandler />\r\n            <div className=\"responsivePlotWidth plot2screen\" style={ {display: plot2Interactive ? \"none\" : \"block\"} }></div>\r\n        </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"plotSwitchPairWrapper\">\r\n        <div className='switchWrapper'>\r\n            <div className=\"interactivePlotSwitchContainer\">\r\n            <p>interactive:</p>\r\n            <input className={ plot3Interactive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={togglePlot3Interactive} \r\n                style={ {backgroundColor: plot3Interactive ? plotSwitchOnColor : plotSwitchOffColor } }\r\n            />\r\n            </div>\r\n        </div>\r\n        <div className=\"plot3\" style={ {backgroundColor: plot3Interactive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'} }> \r\n            <Plot className=\"responsivePlotWidth\" data={plot3.data} layout={plot3.layout} config={plot3.config} useResizeHandler />\r\n            <div className=\"responsivePlotWidth plot3screen\" style={ {display: plot3Interactive ? \"none\" : \"block\"} }></div>\r\n        </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"plotSwitchPairWrapper\">\r\n        <div className='switchWrapper'>\r\n            <div className=\"interactivePlotSwitchContainer\">\r\n            <p>interactive:</p>\r\n            <input className={ plot4Interactive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={togglePlot4Interactive} \r\n                style={ {backgroundColor: plot4Interactive ? plotSwitchOnColor : plotSwitchOffColor  } }\r\n            />\r\n            </div>\r\n        </div>\r\n        <div className=\"plot4\" style={ {backgroundColor: plot4Interactive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'} }> \r\n            <Plot className=\"responsivePlotWidth\" data={plot4.data} layout={plot4.layout} config={plot4.config} useResizeHandler />\r\n            <div className=\"responsivePlotWidth plot4screen\" style={ {display: plot4Interactive ? \"none\" : \"block\"} }></div>\r\n        </div>\r\n        </div>\r\n        \r\n\r\n        <div className=\"plotSwitchPairWrapper\">\r\n        <div className='switchWrapper'>\r\n            <div className=\"interactivePlotSwitchContainer\">\r\n            <p>interactive:</p>\r\n            <input className={ plot5Interactive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={togglePlot5Interactive} \r\n                style={ {backgroundColor: plot5Interactive ? plotSwitchOnColor : plotSwitchOffColor } }\r\n            />\r\n            </div>\r\n        </div>\r\n        <div className=\"plot5\" style={ {backgroundColor: plot5Interactive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'} }> \r\n            <Plot className=\"responsivePlotWidth plot5container\" data={plot5.data} layout={plot5.layout} config={plot5.config} useResizeHandler />\r\n            <div className=\"responsivePlotWidth plot5screen\" style={ {display: plot5Interactive ? \"none\" : \"block\"} }></div>\r\n        </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n    <hr className=\"sectionBreak\"/>\r\n\r\n    <div className=\"performanceBox\">\r\n\r\n    <h2 className=\"modelPerfTitle\">Model Performance Evaluation</h2>\r\n\r\n  \r\n\r\n        <h2 className=\"smallTableHeader\">Confusion Matrix Results Breakdown</h2>\r\n    <br/>\r\n    <div className='tableOuterWrapper'>\r\n        <div className='tableInnerWrapper'>\r\n            <table className=\"scoreTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Correct Positive Predictions</th>\r\n                        <th>Correct Negative Predictions</th>\r\n                        <th>No. of False Positives</th>\r\n                        <th>No. of False Negatives</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>23</td>\r\n                        <td>34</td>\r\n                        <td>6</td>\r\n                        <td>9</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h2  className=\"smallTableHeader\">Evaluation Performance Metrics Table</h2>\r\n    <p className=\"headerSubText\">Calculated using Scikit-Learn metrics module</p>\r\n    <div className='tableOuterWrapper'>\r\n        <div className='tableInnerWrapper'>\r\n            <table className=\"scoreTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Accuracy Score</th>\r\n                        <th>Precision Score</th>\r\n                        <th>Recall Score</th>\r\n                        <th>F1 Score</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>79.2%</td>\r\n                        <td>79.3%</td>\r\n                        <td>72%</td>\r\n                        <td>75%</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n    <h2 className=\"smallTableHeader\">Cross-Validation Score Data</h2>\r\n    <p className=\"headerSubText\">Obtained by performing 10-fold cross-validation of model</p>\r\n    <div className='tableOuterWrapper'>\r\n        <div className='tableInnerWrapper'>\r\n            <table className=\"scoreTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Mean Cross-validated Accuracy Score</th>\r\n                        <th>Standard Deviation</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>75.3%</td>\r\n                        <td>0.084</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n        <h2 className=\"custPlotTitle\"> Custom Plot and Queries</h2>\r\n\r\n\r\n    <div className=\"plotWrapper\">\r\n        <div className=\"plotSwitchPairWrapper\">\r\n                <div className='switchWrapper'>\r\n                    <div className=\"interactivePlotSwitchContainer\">\r\n                    <p>interactive:</p>\r\n                    <input className={ custPlotInteractive ? \"interactivePlotSwitch_On\" : \"interactivePlotSwitch_Off\" } type=\"checkbox\" onChange={toggleCustPlotInteractive} \r\n                        style={ {backgroundColor: custPlotInteractive ? plotSwitchOnColor : plotSwitchOffColor} }\r\n                    />\r\n                    </div>\r\n                </div>\r\n                <div className=\"custPlot\" style={ {backgroundColor: custPlotInteractive ? 'rgba(255, 255, 255, 1.0)' : 'rgba(255, 255, 255, 0.9)'} }> \r\n                    <Plot className=\"responsivePlotWidth\" data={custPlot.data} layout={custPlot.layout} config={custPlot.config} useResizeHandler />\r\n                    {(!isLoading && customQueryData.length === 0) && (\r\n                        <div className=\"custTooltip\">\r\n                            <span>Fit custom query results to a plot here by running a custom query below.</span>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"responsivePlotWidth custPlotScreen\" style={ {display: custPlotInteractive ? \"none\" : \"block\"} }></div>\r\n                </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div>\r\n        <div class=\"infoBox\">\r\n        <p>Custom Plot to Show:</p>\r\n            <select onChange={handleCustPlotSelect}>\r\n            <option value={'bp'}>Stroke Freq. by Blood Pressure Status</option>\r\n            <option value={'hd'}>Stroke Freq. by Heart Disease Status</option>\r\n            <option value={'avg'}>Stroke Freq. as a function of Age and Average Glucose Level</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div className=\"queryContainer\">\r\n        <h2>Custom Query Builder</h2>\r\n        <span id=\"note\">(Text searches are case-sensitive)</span>\r\n        <p id=\"conditions\">Query Conditions: {statements.length}/4</p>\r\n\r\n\r\n         {/* unbroken queryData string below is off - will not be present in live app. \r\n         without special styling, the unbroken string forces the viewport to the string's width. */}\r\n        {/* <p>{JSON.stringify(queryData)}</p> */}\r\n\r\n        {error && <p className=\"errorMessage\">{errorMsg}</p>}\r\n        <button onClick={addStatement}>Add Condition</button>\r\n        <button onClick={removeStatement}>Remove Condition</button>\r\n        <form>\r\n        <div>\r\n        {statements}\r\n        </div>\r\n            <button onClick={runQuery} type=\"submit\">Run Query</button>\r\n        </form>\r\n            {isLoading && <p>Loading...</p>}\r\n    </div>\r\n\r\n    {/* <button className={isCustomExpanded? \"datasetControl\" : \"datasetControl-collapsed\"} onClick={toggleViewCustom}>{isCustomExpanded ? 'Hide custom query result' : 'Show custom query result'}</button> */}\r\n    <button className=\"datasetControl\" onClick={toggleViewCustom}>{isCustomExpanded ? 'Hide custom query result' : 'Show custom query result'}</button>\r\n    {/* {isLoading && <div className=\"spinner\"></div>} */}\r\n\r\n    {isCustomExpanded && (<>\r\n        <h2 className=\"resultsHeader\"> Custom Query Results </h2>\r\n        {!isLoading && <p className=\"resultsInfo\">{customQueryData.length} result{customQueryData.length !== 1 && 's'} returned for query.</p>}\r\n    </>)}\r\n    <div className={isCustomExpanded ? 'tableOuterWrapper' : 'tableOuterWrapper_collapsed'}>\r\n        <div className='tableInnerWrapper'>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id No.</th>\r\n                        <th>Gender</th>\r\n                        <th>Age</th>\r\n                        <th>Hypertension</th>\r\n                        <th>Heart Disease</th>\r\n                        <th>Ever Married</th>\r\n                        <th>Work Type</th>\r\n                        <th>Residence Type</th>\r\n                        <th>Avg. Blood Glucose, mg/dL</th>\r\n                        <th>BMI (Body Mass Index)</th>\r\n                        <th>Smoking Status</th>\r\n                        <th>Had Stroke</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {!isLoading && customQueryData.length < 1 && <tr><td colSpan=\"12\">(No data.)</td></tr>}\r\n                    {customQueryData.map(dataRow => {\r\n                        return (\r\n                            <tr key={'custtable' + dataRow.id}>\r\n                                <td>{dataRow.id}</td>\r\n                                <td>{dataRow.gender}</td>\r\n                                <td>{dataRow.age}</td>\r\n                                <td>{dataRow.hyper}</td>\r\n                                <td>{dataRow.heart_d}</td>\r\n                                <td>{dataRow.ever_married}</td>\r\n                                <td>{dataRow.work_type}</td>\r\n                                <td>{dataRow.res_type}</td>\r\n                                <td>{dataRow.avg_glucose}</td>\r\n                                <td>{dataRow.bmi}</td>\r\n                                <td>{dataRow.smoking}</td>\r\n                                <td>{dataRow.stroke}</td>\r\n                            </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n    <br/>\r\n\r\n\r\n    <button className=\"datasetControl\" onClick={toggleView}>{isExpanded ? 'Hide full dataset' : 'Show full dataset'}</button>\r\n\r\n    {isExpanded && (<> \r\n        <h2 className='fullDataSetTitle'> Full Dataset </h2>\r\n </>)}\r\n    <div className={isExpanded ? 'tableOuterWrapper' : 'tableOuterWrapper_collapsed'}>\r\n        <div className='tableInnerWrapper'>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Id No.</th>\r\n                <th>Gender</th>\r\n                <th>Age</th>\r\n                <th>Hypertension</th>\r\n                <th>Heart Disease</th>\r\n                <th>Ever Married</th>\r\n                <th>Work Type</th>\r\n                <th>Residence Type</th>\r\n                <th>Avg. Blood Glucose, mg/dL</th>\r\n                <th>BMI (Body Mass Index)</th>\r\n                <th>Smoking Status</th>\r\n                <th>Had Stroke</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n                { patientData.map(dataRow => {\r\n                    return (\r\n                        <tr key={'fulltable' + dataRow.id}>\r\n                            <td>{dataRow.id}</td>\r\n                            <td>{dataRow.gender}</td>\r\n                            <td>{dataRow.age}</td>\r\n                            <td>{dataRow.hyper}</td>\r\n                            <td>{dataRow.heart_d}</td>\r\n                            <td>{dataRow.ever_married}</td>\r\n                            <td>{dataRow.work_type}</td>\r\n                            <td>{dataRow.res_type}</td>\r\n                            <td>{dataRow.avg_glucose}</td>\r\n                            <td>{dataRow.bmi}</td>\r\n                            <td>{dataRow.smoking}</td>\r\n                            <td>{dataRow.stroke}</td>\r\n                        </tr>        \r\n                        );\r\n                    })\r\n                } \r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    </div>\r\n\r\n    {!isExpanded && <div className=\"spacingBottom\"></div>}\r\n\r\n\r\n</div>);\r\n};\r\n\r\nexport default DataVisuals;","import { useState } from \"react\";\r\nimport { logToErrorQueue } from \"./Logger\";\r\nimport \"./styles/Settings.css\";\r\nimport { BASE_URL } from \"./store/environment\"\r\n\r\nconst Settings = () => {\r\n\r\n    const [logData, setLogData] = useState([]);\r\n\r\n    const [filter, setFilter] = useState(\"none\");\r\n\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    const getLogs = (event) => {\r\n        setErrorMsg(\"\");\r\n\r\n\r\n\r\n\r\n        fetch((BASE_URL + 'api/retrievelogs'), {\r\n            headers: {'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n        }).then(res => {\r\n            // console.log(res);\r\n            // console.log(res.status);\r\n            if (res.status === 403) {\r\n                setErrorMsg(\"Your account does not have the privileges required to access logs.\");\r\n                \r\n                return;\r\n            }\r\n            return res.json();\r\n        }\r\n        ).then(data => {\r\n            if (!!data.events) {\r\n\r\n                // sort the data in descending order, in place, using sort():\r\n                data.events.sort((record1, record2) => {\r\n                    let time1 = new Date(record1.generated_at).getTime();\r\n                    let time2 = new Date(record2.generated_at).getTime();\r\n                    return time2 - time1;\r\n                });\r\n\r\n                setLogData(data.events);\r\n\r\n            }\r\n            else {\r\n                setErrorMsg(`${data['errormsg']} Please try again.`)\r\n                let err = new Error(`${data['errormsg']} (fetch logs button on Settings page)`);\r\n                throw err;\r\n            }\r\n        }).catch(error => {\r\n            error.cause = \"app. logs fetch request\";\r\n            logToErrorQueue(error);\r\n        });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n    <div className=\"settingsWrapper\">\r\n        <div>\r\n        <div className=\"settingsSpacingTop\"></div>\r\n        <h2>App Monitoring</h2>\r\n        </div>\r\n        <hr />\r\n        <span className=\"error\">{errorMsg}</span>\r\n        {logData.length === 0 && (<div className=\"settingsSpacingTop\"></div>)}\r\n        <button onClick={getLogs}>Load Application Logs</button>\r\n        {logData.length === 0 && <div className=\"settingsSpacingBottom\"></div>}\r\n        {logData.length > 0 && (<><br/><br/>\r\n            <span>Showing last {logData.length} logged events, from most recent to oldest</span>\r\n        <hr />\r\n\r\n        <div className=\"tableOuterWrapper\">\r\n            <div className=\"tableInnerWrapper\">\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Row no.</th>\r\n                        <th>ID no.</th>\r\n                        <th>time created, EST</th>\r\n                        <th>program</th>\r\n                        <th>message</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { logData.map((dataRow, index) => {\r\n                            {/* Note: this key may need changed */}\r\n                            return (\r\n                            <tr key={dataRow.id}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{dataRow.id}</td>\r\n                                <td>{dataRow.generated_at}</td>\r\n                                <td>{dataRow.program}</td>\r\n                                <td>{dataRow.message}</td>\r\n                            </tr>\r\n                            );\r\n                        })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    </>\r\n    ) }\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React, { useContext, useEffect } from \"react\";\n\nimport { Route, Redirect, Switch } from \"react-router-dom\";\n\nimport LoginWindow from \"./LoginWindow.jsx\";\nimport AppWindow from \"./components/AppWindow.jsx\";\nimport Assessment from \"./Assessment.jsx\";\nimport DataVisuals from \"./DataVisuals.jsx\";\nimport Settings from \"./Settings\";\n\nimport AuthContext from \"./store/auth_context.jsx\";\n\nimport TouchContext from \"./store/touch_context\";\n\nconst App = () => {\n\n  const authCtx = useContext(AuthContext);\n\n  // \n  const touchCtx = useContext(TouchContext);\n  // \n  const touchListener = () => {\n    // console.log('the application screen has been touched.');\n    // console.log('touchCtx userTouch val:', touchCtx.userTouch);\n    if (!touchCtx.userTouch) {\n      touchCtx.setUserTouch();\n    }\n  };\n  // \n  // \n  useEffect(() => {\n    window.addEventListener('touchstart', touchListener);\n\n    // cleanup of event listener\n    // if this is...right.\n    return (() => {\n      window.removeEventListener('touchstart', touchListener);\n    })\n  }, []);\n  // \n\n\n  return (\n      <AppWindow>\n        <Switch>\n          <Route exact path=\"/\">\n            {!authCtx.isLoggedIn ? <Redirect to=\"/login\" /> : <Redirect to=\"/assessment\" />}\n          </Route>\n          <Route exact path=\"/login\">\n            {authCtx.isLoggedIn ? <Redirect to=\"/assessment\" /> : <LoginWindow />}\n          </Route>\n          <Route exact path=\"/assessment\">\n            {authCtx.isLoggedIn ? <Assessment /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact path=\"/data\">\n            {/* Route accessible outside of login in order to throw render error - \n            debug of ErrorBoundary page */}\n            {/* Comment out below when live */}\n            {/* <DataVisuals />  */}\n            {/* Uncomment below when live */}\n            {authCtx.isLoggedIn ? <DataVisuals /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route exact path=\"/settings\">\n            {authCtx.isLoggedIn ? <Settings /> : <Redirect to=\"/\" />}\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/\"/>\n          </Route>\n        </Switch>\n      </AppWindow>\n  );\n};\n\nexport default App;\n","import React, { useContext } from \"react\";\r\nimport { Switch, Route, BrowserRouter, NavLink } from \"react-router-dom\";\r\nimport LoginWindow from \"./LoginWindow\";\r\n\r\nimport { BASE_URL } from \"./store/environment\";\r\n\r\nimport { logToErrorQueue } from \"./Logger\";\r\nimport \"./styles/ErrorBoundary.css\";\r\n\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            error: null,\r\n        errorInfo: null \r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        \r\n        // console.log(error, ':', errorInfo);\r\n        \r\n        // const errorJson = {'errordata': {\r\n        //     'error': error,\r\n        //     'errorInfo': errorInfo\r\n        //     }\r\n        // };\r\n        \r\n        // log the error object to the error queue:\r\n        error.cause = \"React render error\";\r\n        console.log('errB error:');\r\n        console.log(Object.keys(error), Object.values(error));\r\n        logToErrorQueue(error);\r\n\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            // render a custom fallback UI\r\n            return (\r\n            <>\r\n            <div className=\"errorwrapper\">\r\n                <h1 className=\"errorheader\">Error</h1>\r\n                <hr/>\r\n                <h1 className=\"face\">☹</h1>\r\n                <h2>Sorry, an unexpected error has occurred.</h2>\r\n                <hr/>\r\n                <p>Please follow the below link to return to the home screen:</p>\r\n                <a href={ BASE_URL } className=\"link\">Return to Home Screen</a>\r\n            </div>\r\n            </>\r\n            );\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport { logToErrorQueue } from './Logger';\n\n\nimport { AuthContextProvider } from \"./store/auth_context.jsx\";\nimport { HashRouter } from 'react-router-dom';\n\nimport ErrorBoundary from './ErrorBoundary';\n\nimport { TouchContextProvider } from './store/touch_context';\n\n\n\n\n\n\n\nwindow.onerror = (msg, src, line, col, error) => {\n  \n  error.cause = `uncaught; line:col ${line}:${col} of ${src}`;\n\n  console.log(error.message);\n\n  logToErrorQueue(error);\n};\n\n// receives PromiseRejectionEvents (say, an async function returns a promise rejection)\n// window.onunhandledrejection = (e) => {\n//   let error = new Error(e.reason);\n//   error.cause = 'unhandled promise rejection';\n//   logToErrorQueue(error);\n// };\n\n// window.addEventListener('error', (errorEvent) => {\n// console.log('ERROR CAPTURED');\n// console.log(errorEvent);\n// });\n\n\n// TODO:\n// - check the order of wrapped elements below. \n\nReactDOM.render(\n  (\n  <ErrorBoundary>\n    <HashRouter>\n      <AuthContextProvider>\n        <TouchContextProvider>\n          <App />\n        </TouchContextProvider>\n      </AuthContextProvider>\n    </HashRouter>\n  </ErrorBoundary>\n  ),\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}